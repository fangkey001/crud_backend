
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Person
 * 
 */
export type Person = $Result.DefaultSelection<Prisma.$PersonPayload>
/**
 * Model ThaiGeographies
 * 
 */
export type ThaiGeographies = $Result.DefaultSelection<Prisma.$ThaiGeographiesPayload>
/**
 * Model ThaiProvinces
 * 
 */
export type ThaiProvinces = $Result.DefaultSelection<Prisma.$ThaiProvincesPayload>
/**
 * Model ThaiDistrict
 * 
 */
export type ThaiDistrict = $Result.DefaultSelection<Prisma.$ThaiDistrictPayload>
/**
 * Model ThaiSubDistrict
 * 
 */
export type ThaiSubDistrict = $Result.DefaultSelection<Prisma.$ThaiSubDistrictPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more People
 * const people = await prisma.person.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more People
   * const people = await prisma.person.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.PersonDelegate<ExtArgs>;

  /**
   * `prisma.thaiGeographies`: Exposes CRUD operations for the **ThaiGeographies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThaiGeographies
    * const thaiGeographies = await prisma.thaiGeographies.findMany()
    * ```
    */
  get thaiGeographies(): Prisma.ThaiGeographiesDelegate<ExtArgs>;

  /**
   * `prisma.thaiProvinces`: Exposes CRUD operations for the **ThaiProvinces** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThaiProvinces
    * const thaiProvinces = await prisma.thaiProvinces.findMany()
    * ```
    */
  get thaiProvinces(): Prisma.ThaiProvincesDelegate<ExtArgs>;

  /**
   * `prisma.thaiDistrict`: Exposes CRUD operations for the **ThaiDistrict** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThaiDistricts
    * const thaiDistricts = await prisma.thaiDistrict.findMany()
    * ```
    */
  get thaiDistrict(): Prisma.ThaiDistrictDelegate<ExtArgs>;

  /**
   * `prisma.thaiSubDistrict`: Exposes CRUD operations for the **ThaiSubDistrict** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThaiSubDistricts
    * const thaiSubDistricts = await prisma.thaiSubDistrict.findMany()
    * ```
    */
  get thaiSubDistrict(): Prisma.ThaiSubDistrictDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Person: 'Person',
    ThaiGeographies: 'ThaiGeographies',
    ThaiProvinces: 'ThaiProvinces',
    ThaiDistrict: 'ThaiDistrict',
    ThaiSubDistrict: 'ThaiSubDistrict'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'person' | 'thaiGeographies' | 'thaiProvinces' | 'thaiDistrict' | 'thaiSubDistrict'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Person: {
        payload: Prisma.$PersonPayload<ExtArgs>
        fields: Prisma.PersonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findFirst: {
            args: Prisma.PersonFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findMany: {
            args: Prisma.PersonFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          create: {
            args: Prisma.PersonCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          createMany: {
            args: Prisma.PersonCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          delete: {
            args: Prisma.PersonDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          update: {
            args: Prisma.PersonUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          deleteMany: {
            args: Prisma.PersonDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PersonUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PersonUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          aggregate: {
            args: Prisma.PersonAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePerson>
          }
          groupBy: {
            args: Prisma.PersonGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PersonGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonCountArgs<ExtArgs>,
            result: $Utils.Optional<PersonCountAggregateOutputType> | number
          }
        }
      }
      ThaiGeographies: {
        payload: Prisma.$ThaiGeographiesPayload<ExtArgs>
        fields: Prisma.ThaiGeographiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThaiGeographiesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiGeographiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThaiGeographiesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiGeographiesPayload>
          }
          findFirst: {
            args: Prisma.ThaiGeographiesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiGeographiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThaiGeographiesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiGeographiesPayload>
          }
          findMany: {
            args: Prisma.ThaiGeographiesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiGeographiesPayload>[]
          }
          create: {
            args: Prisma.ThaiGeographiesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiGeographiesPayload>
          }
          createMany: {
            args: Prisma.ThaiGeographiesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThaiGeographiesCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiGeographiesPayload>[]
          }
          delete: {
            args: Prisma.ThaiGeographiesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiGeographiesPayload>
          }
          update: {
            args: Prisma.ThaiGeographiesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiGeographiesPayload>
          }
          deleteMany: {
            args: Prisma.ThaiGeographiesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ThaiGeographiesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ThaiGeographiesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiGeographiesPayload>
          }
          aggregate: {
            args: Prisma.ThaiGeographiesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateThaiGeographies>
          }
          groupBy: {
            args: Prisma.ThaiGeographiesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ThaiGeographiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThaiGeographiesCountArgs<ExtArgs>,
            result: $Utils.Optional<ThaiGeographiesCountAggregateOutputType> | number
          }
        }
      }
      ThaiProvinces: {
        payload: Prisma.$ThaiProvincesPayload<ExtArgs>
        fields: Prisma.ThaiProvincesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThaiProvincesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiProvincesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThaiProvincesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiProvincesPayload>
          }
          findFirst: {
            args: Prisma.ThaiProvincesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiProvincesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThaiProvincesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiProvincesPayload>
          }
          findMany: {
            args: Prisma.ThaiProvincesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiProvincesPayload>[]
          }
          create: {
            args: Prisma.ThaiProvincesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiProvincesPayload>
          }
          createMany: {
            args: Prisma.ThaiProvincesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThaiProvincesCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiProvincesPayload>[]
          }
          delete: {
            args: Prisma.ThaiProvincesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiProvincesPayload>
          }
          update: {
            args: Prisma.ThaiProvincesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiProvincesPayload>
          }
          deleteMany: {
            args: Prisma.ThaiProvincesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ThaiProvincesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ThaiProvincesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiProvincesPayload>
          }
          aggregate: {
            args: Prisma.ThaiProvincesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateThaiProvinces>
          }
          groupBy: {
            args: Prisma.ThaiProvincesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ThaiProvincesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThaiProvincesCountArgs<ExtArgs>,
            result: $Utils.Optional<ThaiProvincesCountAggregateOutputType> | number
          }
        }
      }
      ThaiDistrict: {
        payload: Prisma.$ThaiDistrictPayload<ExtArgs>
        fields: Prisma.ThaiDistrictFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThaiDistrictFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiDistrictPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThaiDistrictFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiDistrictPayload>
          }
          findFirst: {
            args: Prisma.ThaiDistrictFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiDistrictPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThaiDistrictFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiDistrictPayload>
          }
          findMany: {
            args: Prisma.ThaiDistrictFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiDistrictPayload>[]
          }
          create: {
            args: Prisma.ThaiDistrictCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiDistrictPayload>
          }
          createMany: {
            args: Prisma.ThaiDistrictCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThaiDistrictCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiDistrictPayload>[]
          }
          delete: {
            args: Prisma.ThaiDistrictDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiDistrictPayload>
          }
          update: {
            args: Prisma.ThaiDistrictUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiDistrictPayload>
          }
          deleteMany: {
            args: Prisma.ThaiDistrictDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ThaiDistrictUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ThaiDistrictUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiDistrictPayload>
          }
          aggregate: {
            args: Prisma.ThaiDistrictAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateThaiDistrict>
          }
          groupBy: {
            args: Prisma.ThaiDistrictGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ThaiDistrictGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThaiDistrictCountArgs<ExtArgs>,
            result: $Utils.Optional<ThaiDistrictCountAggregateOutputType> | number
          }
        }
      }
      ThaiSubDistrict: {
        payload: Prisma.$ThaiSubDistrictPayload<ExtArgs>
        fields: Prisma.ThaiSubDistrictFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThaiSubDistrictFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiSubDistrictPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThaiSubDistrictFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiSubDistrictPayload>
          }
          findFirst: {
            args: Prisma.ThaiSubDistrictFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiSubDistrictPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThaiSubDistrictFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiSubDistrictPayload>
          }
          findMany: {
            args: Prisma.ThaiSubDistrictFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiSubDistrictPayload>[]
          }
          create: {
            args: Prisma.ThaiSubDistrictCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiSubDistrictPayload>
          }
          createMany: {
            args: Prisma.ThaiSubDistrictCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThaiSubDistrictCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiSubDistrictPayload>[]
          }
          delete: {
            args: Prisma.ThaiSubDistrictDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiSubDistrictPayload>
          }
          update: {
            args: Prisma.ThaiSubDistrictUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiSubDistrictPayload>
          }
          deleteMany: {
            args: Prisma.ThaiSubDistrictDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ThaiSubDistrictUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ThaiSubDistrictUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThaiSubDistrictPayload>
          }
          aggregate: {
            args: Prisma.ThaiSubDistrictAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateThaiSubDistrict>
          }
          groupBy: {
            args: Prisma.ThaiSubDistrictGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ThaiSubDistrictGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThaiSubDistrictCountArgs<ExtArgs>,
            result: $Utils.Optional<ThaiSubDistrictCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ThaiGeographiesCountOutputType
   */

  export type ThaiGeographiesCountOutputType = {
    provinces: number
  }

  export type ThaiGeographiesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provinces?: boolean | ThaiGeographiesCountOutputTypeCountProvincesArgs
  }

  // Custom InputTypes
  /**
   * ThaiGeographiesCountOutputType without action
   */
  export type ThaiGeographiesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographiesCountOutputType
     */
    select?: ThaiGeographiesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThaiGeographiesCountOutputType without action
   */
  export type ThaiGeographiesCountOutputTypeCountProvincesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThaiProvincesWhereInput
  }


  /**
   * Count Type ThaiProvincesCountOutputType
   */

  export type ThaiProvincesCountOutputType = {
    districts: number
    persons: number
  }

  export type ThaiProvincesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    districts?: boolean | ThaiProvincesCountOutputTypeCountDistrictsArgs
    persons?: boolean | ThaiProvincesCountOutputTypeCountPersonsArgs
  }

  // Custom InputTypes
  /**
   * ThaiProvincesCountOutputType without action
   */
  export type ThaiProvincesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvincesCountOutputType
     */
    select?: ThaiProvincesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThaiProvincesCountOutputType without action
   */
  export type ThaiProvincesCountOutputTypeCountDistrictsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThaiDistrictWhereInput
  }

  /**
   * ThaiProvincesCountOutputType without action
   */
  export type ThaiProvincesCountOutputTypeCountPersonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
  }


  /**
   * Count Type ThaiDistrictCountOutputType
   */

  export type ThaiDistrictCountOutputType = {
    subDistricts: number
    persons: number
  }

  export type ThaiDistrictCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subDistricts?: boolean | ThaiDistrictCountOutputTypeCountSubDistrictsArgs
    persons?: boolean | ThaiDistrictCountOutputTypeCountPersonsArgs
  }

  // Custom InputTypes
  /**
   * ThaiDistrictCountOutputType without action
   */
  export type ThaiDistrictCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrictCountOutputType
     */
    select?: ThaiDistrictCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThaiDistrictCountOutputType without action
   */
  export type ThaiDistrictCountOutputTypeCountSubDistrictsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThaiSubDistrictWhereInput
  }

  /**
   * ThaiDistrictCountOutputType without action
   */
  export type ThaiDistrictCountOutputTypeCountPersonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
  }


  /**
   * Count Type ThaiSubDistrictCountOutputType
   */

  export type ThaiSubDistrictCountOutputType = {
    persons: number
  }

  export type ThaiSubDistrictCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    persons?: boolean | ThaiSubDistrictCountOutputTypeCountPersonsArgs
  }

  // Custom InputTypes
  /**
   * ThaiSubDistrictCountOutputType without action
   */
  export type ThaiSubDistrictCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrictCountOutputType
     */
    select?: ThaiSubDistrictCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThaiSubDistrictCountOutputType without action
   */
  export type ThaiSubDistrictCountOutputTypeCountPersonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Person
   */

  export type AggregatePerson = {
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  export type PersonAvgAggregateOutputType = {
    id: number | null
    age: number | null
    sub_district_id: number | null
    district_id: number | null
    province_id: number | null
  }

  export type PersonSumAggregateOutputType = {
    id: number | null
    age: number | null
    sub_district_id: number | null
    district_id: number | null
    province_id: number | null
  }

  export type PersonMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    gender: string | null
    birth_date: Date | null
    age: number | null
    address: string | null
    sub_district_id: number | null
    district_id: number | null
    province_id: number | null
    zip_code: string | null
    id_card: string | null
    expire_id_card: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PersonMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    gender: string | null
    birth_date: Date | null
    age: number | null
    address: string | null
    sub_district_id: number | null
    district_id: number | null
    province_id: number | null
    zip_code: string | null
    id_card: string | null
    expire_id_card: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PersonCountAggregateOutputType = {
    id: number
    first_name: number
    middle_name: number
    last_name: number
    gender: number
    birth_date: number
    age: number
    address: number
    sub_district_id: number
    district_id: number
    province_id: number
    zip_code: number
    id_card: number
    expire_id_card: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PersonAvgAggregateInputType = {
    id?: true
    age?: true
    sub_district_id?: true
    district_id?: true
    province_id?: true
  }

  export type PersonSumAggregateInputType = {
    id?: true
    age?: true
    sub_district_id?: true
    district_id?: true
    province_id?: true
  }

  export type PersonMinAggregateInputType = {
    id?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    gender?: true
    birth_date?: true
    age?: true
    address?: true
    sub_district_id?: true
    district_id?: true
    province_id?: true
    zip_code?: true
    id_card?: true
    expire_id_card?: true
    created_at?: true
    updated_at?: true
  }

  export type PersonMaxAggregateInputType = {
    id?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    gender?: true
    birth_date?: true
    age?: true
    address?: true
    sub_district_id?: true
    district_id?: true
    province_id?: true
    zip_code?: true
    id_card?: true
    expire_id_card?: true
    created_at?: true
    updated_at?: true
  }

  export type PersonCountAggregateInputType = {
    id?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    gender?: true
    birth_date?: true
    age?: true
    address?: true
    sub_district_id?: true
    district_id?: true
    province_id?: true
    zip_code?: true
    id_card?: true
    expire_id_card?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PersonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Person to aggregate.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned People
    **/
    _count?: true | PersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends PersonAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson[P]>
      : GetScalarType<T[P], AggregatePerson[P]>
  }




  export type PersonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithAggregationInput | PersonOrderByWithAggregationInput[]
    by: PersonScalarFieldEnum[] | PersonScalarFieldEnum
    having?: PersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonCountAggregateInputType | true
    _avg?: PersonAvgAggregateInputType
    _sum?: PersonSumAggregateInputType
    _min?: PersonMinAggregateInputType
    _max?: PersonMaxAggregateInputType
  }

  export type PersonGroupByOutputType = {
    id: number
    first_name: string
    middle_name: string | null
    last_name: string
    gender: string
    birth_date: Date
    age: number
    address: string
    sub_district_id: number
    district_id: number
    province_id: number
    zip_code: string
    id_card: string
    expire_id_card: Date
    created_at: Date
    updated_at: Date
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  type GetPersonGroupByPayload<T extends PersonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonGroupByOutputType[P]>
            : GetScalarType<T[P], PersonGroupByOutputType[P]>
        }
      >
    >


  export type PersonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    gender?: boolean
    birth_date?: boolean
    age?: boolean
    address?: boolean
    sub_district_id?: boolean
    district_id?: boolean
    province_id?: boolean
    zip_code?: boolean
    id_card?: boolean
    expire_id_card?: boolean
    created_at?: boolean
    updated_at?: boolean
    province?: boolean | ThaiProvincesDefaultArgs<ExtArgs>
    district?: boolean | ThaiDistrictDefaultArgs<ExtArgs>
    subDistrict?: boolean | ThaiSubDistrictDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["person"]>

  export type PersonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    gender?: boolean
    birth_date?: boolean
    age?: boolean
    address?: boolean
    sub_district_id?: boolean
    district_id?: boolean
    province_id?: boolean
    zip_code?: boolean
    id_card?: boolean
    expire_id_card?: boolean
    created_at?: boolean
    updated_at?: boolean
    province?: boolean | ThaiProvincesDefaultArgs<ExtArgs>
    district?: boolean | ThaiDistrictDefaultArgs<ExtArgs>
    subDistrict?: boolean | ThaiSubDistrictDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["person"]>

  export type PersonSelectScalar = {
    id?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    gender?: boolean
    birth_date?: boolean
    age?: boolean
    address?: boolean
    sub_district_id?: boolean
    district_id?: boolean
    province_id?: boolean
    zip_code?: boolean
    id_card?: boolean
    expire_id_card?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PersonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    province?: boolean | ThaiProvincesDefaultArgs<ExtArgs>
    district?: boolean | ThaiDistrictDefaultArgs<ExtArgs>
    subDistrict?: boolean | ThaiSubDistrictDefaultArgs<ExtArgs>
  }
  export type PersonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    province?: boolean | ThaiProvincesDefaultArgs<ExtArgs>
    district?: boolean | ThaiDistrictDefaultArgs<ExtArgs>
    subDistrict?: boolean | ThaiSubDistrictDefaultArgs<ExtArgs>
  }

  export type $PersonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Person"
    objects: {
      province: Prisma.$ThaiProvincesPayload<ExtArgs>
      district: Prisma.$ThaiDistrictPayload<ExtArgs>
      subDistrict: Prisma.$ThaiSubDistrictPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      first_name: string
      middle_name: string | null
      last_name: string
      gender: string
      birth_date: Date
      age: number
      address: string
      sub_district_id: number
      district_id: number
      province_id: number
      zip_code: string
      id_card: string
      expire_id_card: Date
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["person"]>
    composites: {}
  }

  type PersonGetPayload<S extends boolean | null | undefined | PersonDefaultArgs> = $Result.GetResult<Prisma.$PersonPayload, S>

  type PersonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PersonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PersonCountAggregateInputType | true
    }

  export interface PersonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Person'], meta: { name: 'Person' } }
    /**
     * Find zero or one Person that matches the filter.
     * @param {PersonFindUniqueArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PersonFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PersonFindUniqueArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Person that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PersonFindUniqueOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PersonFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Person that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PersonFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindFirstArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Person that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PersonFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more People that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personWithIdOnly = await prisma.person.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PersonFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Person.
     * @param {PersonCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
    **/
    create<T extends PersonCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonCreateArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many People.
     * @param {PersonCreateManyArgs} args - Arguments to create many People.
     * @example
     * // Create many People
     * const person = await prisma.person.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PersonCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many People and returns the data saved in the database.
     * @param {PersonCreateManyAndReturnArgs} args - Arguments to create many People.
     * @example
     * // Create many People
     * const person = await prisma.person.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many People and only return the `id`
     * const personWithIdOnly = await prisma.person.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PersonCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Person.
     * @param {PersonDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
    **/
    delete<T extends PersonDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PersonDeleteArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Person.
     * @param {PersonUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PersonUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonUpdateArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more People.
     * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PersonDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PersonUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PersonUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Person.
     * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
    **/
    upsert<T extends PersonUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PersonUpsertArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonCountArgs} args - Arguments to filter People to count.
     * @example
     * // Count the number of People
     * const count = await prisma.person.count({
     *   where: {
     *     // ... the filter for the People we want to count
     *   }
     * })
    **/
    count<T extends PersonCountArgs>(
      args?: Subset<T, PersonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonAggregateArgs>(args: Subset<T, PersonAggregateArgs>): Prisma.PrismaPromise<GetPersonAggregateType<T>>

    /**
     * Group by Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonGroupByArgs['orderBy'] }
        : { orderBy?: PersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Person model
   */
  readonly fields: PersonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    province<T extends ThaiProvincesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThaiProvincesDefaultArgs<ExtArgs>>): Prisma__ThaiProvincesClient<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    district<T extends ThaiDistrictDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThaiDistrictDefaultArgs<ExtArgs>>): Prisma__ThaiDistrictClient<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    subDistrict<T extends ThaiSubDistrictDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThaiSubDistrictDefaultArgs<ExtArgs>>): Prisma__ThaiSubDistrictClient<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Person model
   */ 
  interface PersonFieldRefs {
    readonly id: FieldRef<"Person", 'Int'>
    readonly first_name: FieldRef<"Person", 'String'>
    readonly middle_name: FieldRef<"Person", 'String'>
    readonly last_name: FieldRef<"Person", 'String'>
    readonly gender: FieldRef<"Person", 'String'>
    readonly birth_date: FieldRef<"Person", 'DateTime'>
    readonly age: FieldRef<"Person", 'Int'>
    readonly address: FieldRef<"Person", 'String'>
    readonly sub_district_id: FieldRef<"Person", 'Int'>
    readonly district_id: FieldRef<"Person", 'Int'>
    readonly province_id: FieldRef<"Person", 'Int'>
    readonly zip_code: FieldRef<"Person", 'String'>
    readonly id_card: FieldRef<"Person", 'String'>
    readonly expire_id_card: FieldRef<"Person", 'DateTime'>
    readonly created_at: FieldRef<"Person", 'DateTime'>
    readonly updated_at: FieldRef<"Person", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Person findUnique
   */
  export type PersonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findUniqueOrThrow
   */
  export type PersonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findFirst
   */
  export type PersonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findFirstOrThrow
   */
  export type PersonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findMany
   */
  export type PersonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which People to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person create
   */
  export type PersonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The data needed to create a Person.
     */
    data: XOR<PersonCreateInput, PersonUncheckedCreateInput>
  }

  /**
   * Person createMany
   */
  export type PersonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Person createManyAndReturn
   */
  export type PersonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Person update
   */
  export type PersonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The data needed to update a Person.
     */
    data: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
    /**
     * Choose, which Person to update.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person updateMany
   */
  export type PersonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update People.
     */
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     */
    where?: PersonWhereInput
  }

  /**
   * Person upsert
   */
  export type PersonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The filter to search for the Person to update in case it exists.
     */
    where: PersonWhereUniqueInput
    /**
     * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
     */
    create: XOR<PersonCreateInput, PersonUncheckedCreateInput>
    /**
     * In case the Person was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
  }

  /**
   * Person delete
   */
  export type PersonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter which Person to delete.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person deleteMany
   */
  export type PersonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which People to delete
     */
    where?: PersonWhereInput
  }

  /**
   * Person without action
   */
  export type PersonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
  }


  /**
   * Model ThaiGeographies
   */

  export type AggregateThaiGeographies = {
    _count: ThaiGeographiesCountAggregateOutputType | null
    _avg: ThaiGeographiesAvgAggregateOutputType | null
    _sum: ThaiGeographiesSumAggregateOutputType | null
    _min: ThaiGeographiesMinAggregateOutputType | null
    _max: ThaiGeographiesMaxAggregateOutputType | null
  }

  export type ThaiGeographiesAvgAggregateOutputType = {
    id: number | null
  }

  export type ThaiGeographiesSumAggregateOutputType = {
    id: number | null
  }

  export type ThaiGeographiesMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ThaiGeographiesMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ThaiGeographiesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ThaiGeographiesAvgAggregateInputType = {
    id?: true
  }

  export type ThaiGeographiesSumAggregateInputType = {
    id?: true
  }

  export type ThaiGeographiesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ThaiGeographiesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ThaiGeographiesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ThaiGeographiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThaiGeographies to aggregate.
     */
    where?: ThaiGeographiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiGeographies to fetch.
     */
    orderBy?: ThaiGeographiesOrderByWithRelationInput | ThaiGeographiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThaiGeographiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiGeographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiGeographies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThaiGeographies
    **/
    _count?: true | ThaiGeographiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThaiGeographiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThaiGeographiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThaiGeographiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThaiGeographiesMaxAggregateInputType
  }

  export type GetThaiGeographiesAggregateType<T extends ThaiGeographiesAggregateArgs> = {
        [P in keyof T & keyof AggregateThaiGeographies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThaiGeographies[P]>
      : GetScalarType<T[P], AggregateThaiGeographies[P]>
  }




  export type ThaiGeographiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThaiGeographiesWhereInput
    orderBy?: ThaiGeographiesOrderByWithAggregationInput | ThaiGeographiesOrderByWithAggregationInput[]
    by: ThaiGeographiesScalarFieldEnum[] | ThaiGeographiesScalarFieldEnum
    having?: ThaiGeographiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThaiGeographiesCountAggregateInputType | true
    _avg?: ThaiGeographiesAvgAggregateInputType
    _sum?: ThaiGeographiesSumAggregateInputType
    _min?: ThaiGeographiesMinAggregateInputType
    _max?: ThaiGeographiesMaxAggregateInputType
  }

  export type ThaiGeographiesGroupByOutputType = {
    id: number
    name: string
    _count: ThaiGeographiesCountAggregateOutputType | null
    _avg: ThaiGeographiesAvgAggregateOutputType | null
    _sum: ThaiGeographiesSumAggregateOutputType | null
    _min: ThaiGeographiesMinAggregateOutputType | null
    _max: ThaiGeographiesMaxAggregateOutputType | null
  }

  type GetThaiGeographiesGroupByPayload<T extends ThaiGeographiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThaiGeographiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThaiGeographiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThaiGeographiesGroupByOutputType[P]>
            : GetScalarType<T[P], ThaiGeographiesGroupByOutputType[P]>
        }
      >
    >


  export type ThaiGeographiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    provinces?: boolean | ThaiGeographies$provincesArgs<ExtArgs>
    _count?: boolean | ThaiGeographiesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thaiGeographies"]>

  export type ThaiGeographiesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["thaiGeographies"]>

  export type ThaiGeographiesSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ThaiGeographiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provinces?: boolean | ThaiGeographies$provincesArgs<ExtArgs>
    _count?: boolean | ThaiGeographiesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ThaiGeographiesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ThaiGeographiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ThaiGeographies"
    objects: {
      provinces: Prisma.$ThaiProvincesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["thaiGeographies"]>
    composites: {}
  }

  type ThaiGeographiesGetPayload<S extends boolean | null | undefined | ThaiGeographiesDefaultArgs> = $Result.GetResult<Prisma.$ThaiGeographiesPayload, S>

  type ThaiGeographiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ThaiGeographiesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ThaiGeographiesCountAggregateInputType | true
    }

  export interface ThaiGeographiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThaiGeographies'], meta: { name: 'ThaiGeographies' } }
    /**
     * Find zero or one ThaiGeographies that matches the filter.
     * @param {ThaiGeographiesFindUniqueArgs} args - Arguments to find a ThaiGeographies
     * @example
     * // Get one ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThaiGeographiesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiGeographiesFindUniqueArgs<ExtArgs>>
    ): Prisma__ThaiGeographiesClient<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ThaiGeographies that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ThaiGeographiesFindUniqueOrThrowArgs} args - Arguments to find a ThaiGeographies
     * @example
     * // Get one ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThaiGeographiesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiGeographiesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ThaiGeographiesClient<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ThaiGeographies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiGeographiesFindFirstArgs} args - Arguments to find a ThaiGeographies
     * @example
     * // Get one ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThaiGeographiesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiGeographiesFindFirstArgs<ExtArgs>>
    ): Prisma__ThaiGeographiesClient<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ThaiGeographies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiGeographiesFindFirstOrThrowArgs} args - Arguments to find a ThaiGeographies
     * @example
     * // Get one ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThaiGeographiesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiGeographiesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ThaiGeographiesClient<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ThaiGeographies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiGeographiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.findMany()
     * 
     * // Get first 10 ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thaiGeographiesWithIdOnly = await prisma.thaiGeographies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThaiGeographiesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiGeographiesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ThaiGeographies.
     * @param {ThaiGeographiesCreateArgs} args - Arguments to create a ThaiGeographies.
     * @example
     * // Create one ThaiGeographies
     * const ThaiGeographies = await prisma.thaiGeographies.create({
     *   data: {
     *     // ... data to create a ThaiGeographies
     *   }
     * })
     * 
    **/
    create<T extends ThaiGeographiesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiGeographiesCreateArgs<ExtArgs>>
    ): Prisma__ThaiGeographiesClient<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ThaiGeographies.
     * @param {ThaiGeographiesCreateManyArgs} args - Arguments to create many ThaiGeographies.
     * @example
     * // Create many ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ThaiGeographiesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiGeographiesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ThaiGeographies and returns the data saved in the database.
     * @param {ThaiGeographiesCreateManyAndReturnArgs} args - Arguments to create many ThaiGeographies.
     * @example
     * // Create many ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ThaiGeographies and only return the `id`
     * const thaiGeographiesWithIdOnly = await prisma.thaiGeographies.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ThaiGeographiesCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiGeographiesCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ThaiGeographies.
     * @param {ThaiGeographiesDeleteArgs} args - Arguments to delete one ThaiGeographies.
     * @example
     * // Delete one ThaiGeographies
     * const ThaiGeographies = await prisma.thaiGeographies.delete({
     *   where: {
     *     // ... filter to delete one ThaiGeographies
     *   }
     * })
     * 
    **/
    delete<T extends ThaiGeographiesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiGeographiesDeleteArgs<ExtArgs>>
    ): Prisma__ThaiGeographiesClient<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ThaiGeographies.
     * @param {ThaiGeographiesUpdateArgs} args - Arguments to update one ThaiGeographies.
     * @example
     * // Update one ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThaiGeographiesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiGeographiesUpdateArgs<ExtArgs>>
    ): Prisma__ThaiGeographiesClient<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ThaiGeographies.
     * @param {ThaiGeographiesDeleteManyArgs} args - Arguments to filter ThaiGeographies to delete.
     * @example
     * // Delete a few ThaiGeographies
     * const { count } = await prisma.thaiGeographies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThaiGeographiesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiGeographiesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThaiGeographies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiGeographiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThaiGeographiesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiGeographiesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ThaiGeographies.
     * @param {ThaiGeographiesUpsertArgs} args - Arguments to update or create a ThaiGeographies.
     * @example
     * // Update or create a ThaiGeographies
     * const thaiGeographies = await prisma.thaiGeographies.upsert({
     *   create: {
     *     // ... data to create a ThaiGeographies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThaiGeographies we want to update
     *   }
     * })
    **/
    upsert<T extends ThaiGeographiesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiGeographiesUpsertArgs<ExtArgs>>
    ): Prisma__ThaiGeographiesClient<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ThaiGeographies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiGeographiesCountArgs} args - Arguments to filter ThaiGeographies to count.
     * @example
     * // Count the number of ThaiGeographies
     * const count = await prisma.thaiGeographies.count({
     *   where: {
     *     // ... the filter for the ThaiGeographies we want to count
     *   }
     * })
    **/
    count<T extends ThaiGeographiesCountArgs>(
      args?: Subset<T, ThaiGeographiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThaiGeographiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThaiGeographies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiGeographiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThaiGeographiesAggregateArgs>(args: Subset<T, ThaiGeographiesAggregateArgs>): Prisma.PrismaPromise<GetThaiGeographiesAggregateType<T>>

    /**
     * Group by ThaiGeographies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiGeographiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThaiGeographiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThaiGeographiesGroupByArgs['orderBy'] }
        : { orderBy?: ThaiGeographiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThaiGeographiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThaiGeographiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThaiGeographies model
   */
  readonly fields: ThaiGeographiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThaiGeographies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThaiGeographiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    provinces<T extends ThaiGeographies$provincesArgs<ExtArgs> = {}>(args?: Subset<T, ThaiGeographies$provincesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ThaiGeographies model
   */ 
  interface ThaiGeographiesFieldRefs {
    readonly id: FieldRef<"ThaiGeographies", 'Int'>
    readonly name: FieldRef<"ThaiGeographies", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ThaiGeographies findUnique
   */
  export type ThaiGeographiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiGeographiesInclude<ExtArgs> | null
    /**
     * Filter, which ThaiGeographies to fetch.
     */
    where: ThaiGeographiesWhereUniqueInput
  }

  /**
   * ThaiGeographies findUniqueOrThrow
   */
  export type ThaiGeographiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiGeographiesInclude<ExtArgs> | null
    /**
     * Filter, which ThaiGeographies to fetch.
     */
    where: ThaiGeographiesWhereUniqueInput
  }

  /**
   * ThaiGeographies findFirst
   */
  export type ThaiGeographiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiGeographiesInclude<ExtArgs> | null
    /**
     * Filter, which ThaiGeographies to fetch.
     */
    where?: ThaiGeographiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiGeographies to fetch.
     */
    orderBy?: ThaiGeographiesOrderByWithRelationInput | ThaiGeographiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThaiGeographies.
     */
    cursor?: ThaiGeographiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiGeographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiGeographies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThaiGeographies.
     */
    distinct?: ThaiGeographiesScalarFieldEnum | ThaiGeographiesScalarFieldEnum[]
  }

  /**
   * ThaiGeographies findFirstOrThrow
   */
  export type ThaiGeographiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiGeographiesInclude<ExtArgs> | null
    /**
     * Filter, which ThaiGeographies to fetch.
     */
    where?: ThaiGeographiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiGeographies to fetch.
     */
    orderBy?: ThaiGeographiesOrderByWithRelationInput | ThaiGeographiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThaiGeographies.
     */
    cursor?: ThaiGeographiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiGeographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiGeographies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThaiGeographies.
     */
    distinct?: ThaiGeographiesScalarFieldEnum | ThaiGeographiesScalarFieldEnum[]
  }

  /**
   * ThaiGeographies findMany
   */
  export type ThaiGeographiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiGeographiesInclude<ExtArgs> | null
    /**
     * Filter, which ThaiGeographies to fetch.
     */
    where?: ThaiGeographiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiGeographies to fetch.
     */
    orderBy?: ThaiGeographiesOrderByWithRelationInput | ThaiGeographiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThaiGeographies.
     */
    cursor?: ThaiGeographiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiGeographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiGeographies.
     */
    skip?: number
    distinct?: ThaiGeographiesScalarFieldEnum | ThaiGeographiesScalarFieldEnum[]
  }

  /**
   * ThaiGeographies create
   */
  export type ThaiGeographiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiGeographiesInclude<ExtArgs> | null
    /**
     * The data needed to create a ThaiGeographies.
     */
    data: XOR<ThaiGeographiesCreateInput, ThaiGeographiesUncheckedCreateInput>
  }

  /**
   * ThaiGeographies createMany
   */
  export type ThaiGeographiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ThaiGeographies.
     */
    data: ThaiGeographiesCreateManyInput | ThaiGeographiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThaiGeographies createManyAndReturn
   */
  export type ThaiGeographiesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ThaiGeographies.
     */
    data: ThaiGeographiesCreateManyInput | ThaiGeographiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThaiGeographies update
   */
  export type ThaiGeographiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiGeographiesInclude<ExtArgs> | null
    /**
     * The data needed to update a ThaiGeographies.
     */
    data: XOR<ThaiGeographiesUpdateInput, ThaiGeographiesUncheckedUpdateInput>
    /**
     * Choose, which ThaiGeographies to update.
     */
    where: ThaiGeographiesWhereUniqueInput
  }

  /**
   * ThaiGeographies updateMany
   */
  export type ThaiGeographiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThaiGeographies.
     */
    data: XOR<ThaiGeographiesUpdateManyMutationInput, ThaiGeographiesUncheckedUpdateManyInput>
    /**
     * Filter which ThaiGeographies to update
     */
    where?: ThaiGeographiesWhereInput
  }

  /**
   * ThaiGeographies upsert
   */
  export type ThaiGeographiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiGeographiesInclude<ExtArgs> | null
    /**
     * The filter to search for the ThaiGeographies to update in case it exists.
     */
    where: ThaiGeographiesWhereUniqueInput
    /**
     * In case the ThaiGeographies found by the `where` argument doesn't exist, create a new ThaiGeographies with this data.
     */
    create: XOR<ThaiGeographiesCreateInput, ThaiGeographiesUncheckedCreateInput>
    /**
     * In case the ThaiGeographies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThaiGeographiesUpdateInput, ThaiGeographiesUncheckedUpdateInput>
  }

  /**
   * ThaiGeographies delete
   */
  export type ThaiGeographiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiGeographiesInclude<ExtArgs> | null
    /**
     * Filter which ThaiGeographies to delete.
     */
    where: ThaiGeographiesWhereUniqueInput
  }

  /**
   * ThaiGeographies deleteMany
   */
  export type ThaiGeographiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThaiGeographies to delete
     */
    where?: ThaiGeographiesWhereInput
  }

  /**
   * ThaiGeographies.provinces
   */
  export type ThaiGeographies$provincesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
    where?: ThaiProvincesWhereInput
    orderBy?: ThaiProvincesOrderByWithRelationInput | ThaiProvincesOrderByWithRelationInput[]
    cursor?: ThaiProvincesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThaiProvincesScalarFieldEnum | ThaiProvincesScalarFieldEnum[]
  }

  /**
   * ThaiGeographies without action
   */
  export type ThaiGeographiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiGeographies
     */
    select?: ThaiGeographiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiGeographiesInclude<ExtArgs> | null
  }


  /**
   * Model ThaiProvinces
   */

  export type AggregateThaiProvinces = {
    _count: ThaiProvincesCountAggregateOutputType | null
    _avg: ThaiProvincesAvgAggregateOutputType | null
    _sum: ThaiProvincesSumAggregateOutputType | null
    _min: ThaiProvincesMinAggregateOutputType | null
    _max: ThaiProvincesMaxAggregateOutputType | null
  }

  export type ThaiProvincesAvgAggregateOutputType = {
    id: number | null
    geography_id: number | null
  }

  export type ThaiProvincesSumAggregateOutputType = {
    id: number | null
    geography_id: number | null
  }

  export type ThaiProvincesMinAggregateOutputType = {
    id: number | null
    name_th: string | null
    name_en: string | null
    geography_id: number | null
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
  }

  export type ThaiProvincesMaxAggregateOutputType = {
    id: number | null
    name_th: string | null
    name_en: string | null
    geography_id: number | null
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
  }

  export type ThaiProvincesCountAggregateOutputType = {
    id: number
    name_th: number
    name_en: number
    geography_id: number
    created_at: number
    updated_at: number
    delete_at: number
    _all: number
  }


  export type ThaiProvincesAvgAggregateInputType = {
    id?: true
    geography_id?: true
  }

  export type ThaiProvincesSumAggregateInputType = {
    id?: true
    geography_id?: true
  }

  export type ThaiProvincesMinAggregateInputType = {
    id?: true
    name_th?: true
    name_en?: true
    geography_id?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
  }

  export type ThaiProvincesMaxAggregateInputType = {
    id?: true
    name_th?: true
    name_en?: true
    geography_id?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
  }

  export type ThaiProvincesCountAggregateInputType = {
    id?: true
    name_th?: true
    name_en?: true
    geography_id?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
    _all?: true
  }

  export type ThaiProvincesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThaiProvinces to aggregate.
     */
    where?: ThaiProvincesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiProvinces to fetch.
     */
    orderBy?: ThaiProvincesOrderByWithRelationInput | ThaiProvincesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThaiProvincesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiProvinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiProvinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThaiProvinces
    **/
    _count?: true | ThaiProvincesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThaiProvincesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThaiProvincesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThaiProvincesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThaiProvincesMaxAggregateInputType
  }

  export type GetThaiProvincesAggregateType<T extends ThaiProvincesAggregateArgs> = {
        [P in keyof T & keyof AggregateThaiProvinces]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThaiProvinces[P]>
      : GetScalarType<T[P], AggregateThaiProvinces[P]>
  }




  export type ThaiProvincesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThaiProvincesWhereInput
    orderBy?: ThaiProvincesOrderByWithAggregationInput | ThaiProvincesOrderByWithAggregationInput[]
    by: ThaiProvincesScalarFieldEnum[] | ThaiProvincesScalarFieldEnum
    having?: ThaiProvincesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThaiProvincesCountAggregateInputType | true
    _avg?: ThaiProvincesAvgAggregateInputType
    _sum?: ThaiProvincesSumAggregateInputType
    _min?: ThaiProvincesMinAggregateInputType
    _max?: ThaiProvincesMaxAggregateInputType
  }

  export type ThaiProvincesGroupByOutputType = {
    id: number
    name_th: string
    name_en: string
    geography_id: number
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
    _count: ThaiProvincesCountAggregateOutputType | null
    _avg: ThaiProvincesAvgAggregateOutputType | null
    _sum: ThaiProvincesSumAggregateOutputType | null
    _min: ThaiProvincesMinAggregateOutputType | null
    _max: ThaiProvincesMaxAggregateOutputType | null
  }

  type GetThaiProvincesGroupByPayload<T extends ThaiProvincesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThaiProvincesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThaiProvincesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThaiProvincesGroupByOutputType[P]>
            : GetScalarType<T[P], ThaiProvincesGroupByOutputType[P]>
        }
      >
    >


  export type ThaiProvincesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_th?: boolean
    name_en?: boolean
    geography_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
    geography?: boolean | ThaiGeographiesDefaultArgs<ExtArgs>
    districts?: boolean | ThaiProvinces$districtsArgs<ExtArgs>
    persons?: boolean | ThaiProvinces$personsArgs<ExtArgs>
    _count?: boolean | ThaiProvincesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thaiProvinces"]>

  export type ThaiProvincesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_th?: boolean
    name_en?: boolean
    geography_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
    geography?: boolean | ThaiGeographiesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thaiProvinces"]>

  export type ThaiProvincesSelectScalar = {
    id?: boolean
    name_th?: boolean
    name_en?: boolean
    geography_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
  }

  export type ThaiProvincesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    geography?: boolean | ThaiGeographiesDefaultArgs<ExtArgs>
    districts?: boolean | ThaiProvinces$districtsArgs<ExtArgs>
    persons?: boolean | ThaiProvinces$personsArgs<ExtArgs>
    _count?: boolean | ThaiProvincesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ThaiProvincesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    geography?: boolean | ThaiGeographiesDefaultArgs<ExtArgs>
  }

  export type $ThaiProvincesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ThaiProvinces"
    objects: {
      geography: Prisma.$ThaiGeographiesPayload<ExtArgs>
      districts: Prisma.$ThaiDistrictPayload<ExtArgs>[]
      persons: Prisma.$PersonPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name_th: string
      name_en: string
      geography_id: number
      created_at: Date | null
      updated_at: Date | null
      delete_at: Date | null
    }, ExtArgs["result"]["thaiProvinces"]>
    composites: {}
  }

  type ThaiProvincesGetPayload<S extends boolean | null | undefined | ThaiProvincesDefaultArgs> = $Result.GetResult<Prisma.$ThaiProvincesPayload, S>

  type ThaiProvincesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ThaiProvincesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ThaiProvincesCountAggregateInputType | true
    }

  export interface ThaiProvincesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThaiProvinces'], meta: { name: 'ThaiProvinces' } }
    /**
     * Find zero or one ThaiProvinces that matches the filter.
     * @param {ThaiProvincesFindUniqueArgs} args - Arguments to find a ThaiProvinces
     * @example
     * // Get one ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThaiProvincesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiProvincesFindUniqueArgs<ExtArgs>>
    ): Prisma__ThaiProvincesClient<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ThaiProvinces that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ThaiProvincesFindUniqueOrThrowArgs} args - Arguments to find a ThaiProvinces
     * @example
     * // Get one ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThaiProvincesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiProvincesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ThaiProvincesClient<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ThaiProvinces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiProvincesFindFirstArgs} args - Arguments to find a ThaiProvinces
     * @example
     * // Get one ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThaiProvincesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiProvincesFindFirstArgs<ExtArgs>>
    ): Prisma__ThaiProvincesClient<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ThaiProvinces that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiProvincesFindFirstOrThrowArgs} args - Arguments to find a ThaiProvinces
     * @example
     * // Get one ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThaiProvincesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiProvincesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ThaiProvincesClient<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ThaiProvinces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiProvincesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.findMany()
     * 
     * // Get first 10 ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thaiProvincesWithIdOnly = await prisma.thaiProvinces.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThaiProvincesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiProvincesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ThaiProvinces.
     * @param {ThaiProvincesCreateArgs} args - Arguments to create a ThaiProvinces.
     * @example
     * // Create one ThaiProvinces
     * const ThaiProvinces = await prisma.thaiProvinces.create({
     *   data: {
     *     // ... data to create a ThaiProvinces
     *   }
     * })
     * 
    **/
    create<T extends ThaiProvincesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiProvincesCreateArgs<ExtArgs>>
    ): Prisma__ThaiProvincesClient<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ThaiProvinces.
     * @param {ThaiProvincesCreateManyArgs} args - Arguments to create many ThaiProvinces.
     * @example
     * // Create many ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ThaiProvincesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiProvincesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ThaiProvinces and returns the data saved in the database.
     * @param {ThaiProvincesCreateManyAndReturnArgs} args - Arguments to create many ThaiProvinces.
     * @example
     * // Create many ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ThaiProvinces and only return the `id`
     * const thaiProvincesWithIdOnly = await prisma.thaiProvinces.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ThaiProvincesCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiProvincesCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ThaiProvinces.
     * @param {ThaiProvincesDeleteArgs} args - Arguments to delete one ThaiProvinces.
     * @example
     * // Delete one ThaiProvinces
     * const ThaiProvinces = await prisma.thaiProvinces.delete({
     *   where: {
     *     // ... filter to delete one ThaiProvinces
     *   }
     * })
     * 
    **/
    delete<T extends ThaiProvincesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiProvincesDeleteArgs<ExtArgs>>
    ): Prisma__ThaiProvincesClient<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ThaiProvinces.
     * @param {ThaiProvincesUpdateArgs} args - Arguments to update one ThaiProvinces.
     * @example
     * // Update one ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThaiProvincesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiProvincesUpdateArgs<ExtArgs>>
    ): Prisma__ThaiProvincesClient<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ThaiProvinces.
     * @param {ThaiProvincesDeleteManyArgs} args - Arguments to filter ThaiProvinces to delete.
     * @example
     * // Delete a few ThaiProvinces
     * const { count } = await prisma.thaiProvinces.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThaiProvincesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiProvincesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThaiProvinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiProvincesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThaiProvincesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiProvincesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ThaiProvinces.
     * @param {ThaiProvincesUpsertArgs} args - Arguments to update or create a ThaiProvinces.
     * @example
     * // Update or create a ThaiProvinces
     * const thaiProvinces = await prisma.thaiProvinces.upsert({
     *   create: {
     *     // ... data to create a ThaiProvinces
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThaiProvinces we want to update
     *   }
     * })
    **/
    upsert<T extends ThaiProvincesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiProvincesUpsertArgs<ExtArgs>>
    ): Prisma__ThaiProvincesClient<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ThaiProvinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiProvincesCountArgs} args - Arguments to filter ThaiProvinces to count.
     * @example
     * // Count the number of ThaiProvinces
     * const count = await prisma.thaiProvinces.count({
     *   where: {
     *     // ... the filter for the ThaiProvinces we want to count
     *   }
     * })
    **/
    count<T extends ThaiProvincesCountArgs>(
      args?: Subset<T, ThaiProvincesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThaiProvincesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThaiProvinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiProvincesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThaiProvincesAggregateArgs>(args: Subset<T, ThaiProvincesAggregateArgs>): Prisma.PrismaPromise<GetThaiProvincesAggregateType<T>>

    /**
     * Group by ThaiProvinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiProvincesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThaiProvincesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThaiProvincesGroupByArgs['orderBy'] }
        : { orderBy?: ThaiProvincesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThaiProvincesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThaiProvincesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThaiProvinces model
   */
  readonly fields: ThaiProvincesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThaiProvinces.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThaiProvincesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    geography<T extends ThaiGeographiesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThaiGeographiesDefaultArgs<ExtArgs>>): Prisma__ThaiGeographiesClient<$Result.GetResult<Prisma.$ThaiGeographiesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    districts<T extends ThaiProvinces$districtsArgs<ExtArgs> = {}>(args?: Subset<T, ThaiProvinces$districtsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'findMany'> | Null>;

    persons<T extends ThaiProvinces$personsArgs<ExtArgs> = {}>(args?: Subset<T, ThaiProvinces$personsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ThaiProvinces model
   */ 
  interface ThaiProvincesFieldRefs {
    readonly id: FieldRef<"ThaiProvinces", 'Int'>
    readonly name_th: FieldRef<"ThaiProvinces", 'String'>
    readonly name_en: FieldRef<"ThaiProvinces", 'String'>
    readonly geography_id: FieldRef<"ThaiProvinces", 'Int'>
    readonly created_at: FieldRef<"ThaiProvinces", 'DateTime'>
    readonly updated_at: FieldRef<"ThaiProvinces", 'DateTime'>
    readonly delete_at: FieldRef<"ThaiProvinces", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ThaiProvinces findUnique
   */
  export type ThaiProvincesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
    /**
     * Filter, which ThaiProvinces to fetch.
     */
    where: ThaiProvincesWhereUniqueInput
  }

  /**
   * ThaiProvinces findUniqueOrThrow
   */
  export type ThaiProvincesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
    /**
     * Filter, which ThaiProvinces to fetch.
     */
    where: ThaiProvincesWhereUniqueInput
  }

  /**
   * ThaiProvinces findFirst
   */
  export type ThaiProvincesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
    /**
     * Filter, which ThaiProvinces to fetch.
     */
    where?: ThaiProvincesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiProvinces to fetch.
     */
    orderBy?: ThaiProvincesOrderByWithRelationInput | ThaiProvincesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThaiProvinces.
     */
    cursor?: ThaiProvincesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiProvinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiProvinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThaiProvinces.
     */
    distinct?: ThaiProvincesScalarFieldEnum | ThaiProvincesScalarFieldEnum[]
  }

  /**
   * ThaiProvinces findFirstOrThrow
   */
  export type ThaiProvincesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
    /**
     * Filter, which ThaiProvinces to fetch.
     */
    where?: ThaiProvincesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiProvinces to fetch.
     */
    orderBy?: ThaiProvincesOrderByWithRelationInput | ThaiProvincesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThaiProvinces.
     */
    cursor?: ThaiProvincesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiProvinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiProvinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThaiProvinces.
     */
    distinct?: ThaiProvincesScalarFieldEnum | ThaiProvincesScalarFieldEnum[]
  }

  /**
   * ThaiProvinces findMany
   */
  export type ThaiProvincesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
    /**
     * Filter, which ThaiProvinces to fetch.
     */
    where?: ThaiProvincesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiProvinces to fetch.
     */
    orderBy?: ThaiProvincesOrderByWithRelationInput | ThaiProvincesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThaiProvinces.
     */
    cursor?: ThaiProvincesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiProvinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiProvinces.
     */
    skip?: number
    distinct?: ThaiProvincesScalarFieldEnum | ThaiProvincesScalarFieldEnum[]
  }

  /**
   * ThaiProvinces create
   */
  export type ThaiProvincesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
    /**
     * The data needed to create a ThaiProvinces.
     */
    data: XOR<ThaiProvincesCreateInput, ThaiProvincesUncheckedCreateInput>
  }

  /**
   * ThaiProvinces createMany
   */
  export type ThaiProvincesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ThaiProvinces.
     */
    data: ThaiProvincesCreateManyInput | ThaiProvincesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThaiProvinces createManyAndReturn
   */
  export type ThaiProvincesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ThaiProvinces.
     */
    data: ThaiProvincesCreateManyInput | ThaiProvincesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThaiProvinces update
   */
  export type ThaiProvincesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
    /**
     * The data needed to update a ThaiProvinces.
     */
    data: XOR<ThaiProvincesUpdateInput, ThaiProvincesUncheckedUpdateInput>
    /**
     * Choose, which ThaiProvinces to update.
     */
    where: ThaiProvincesWhereUniqueInput
  }

  /**
   * ThaiProvinces updateMany
   */
  export type ThaiProvincesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThaiProvinces.
     */
    data: XOR<ThaiProvincesUpdateManyMutationInput, ThaiProvincesUncheckedUpdateManyInput>
    /**
     * Filter which ThaiProvinces to update
     */
    where?: ThaiProvincesWhereInput
  }

  /**
   * ThaiProvinces upsert
   */
  export type ThaiProvincesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
    /**
     * The filter to search for the ThaiProvinces to update in case it exists.
     */
    where: ThaiProvincesWhereUniqueInput
    /**
     * In case the ThaiProvinces found by the `where` argument doesn't exist, create a new ThaiProvinces with this data.
     */
    create: XOR<ThaiProvincesCreateInput, ThaiProvincesUncheckedCreateInput>
    /**
     * In case the ThaiProvinces was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThaiProvincesUpdateInput, ThaiProvincesUncheckedUpdateInput>
  }

  /**
   * ThaiProvinces delete
   */
  export type ThaiProvincesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
    /**
     * Filter which ThaiProvinces to delete.
     */
    where: ThaiProvincesWhereUniqueInput
  }

  /**
   * ThaiProvinces deleteMany
   */
  export type ThaiProvincesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThaiProvinces to delete
     */
    where?: ThaiProvincesWhereInput
  }

  /**
   * ThaiProvinces.districts
   */
  export type ThaiProvinces$districtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
    where?: ThaiDistrictWhereInput
    orderBy?: ThaiDistrictOrderByWithRelationInput | ThaiDistrictOrderByWithRelationInput[]
    cursor?: ThaiDistrictWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThaiDistrictScalarFieldEnum | ThaiDistrictScalarFieldEnum[]
  }

  /**
   * ThaiProvinces.persons
   */
  export type ThaiProvinces$personsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    cursor?: PersonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * ThaiProvinces without action
   */
  export type ThaiProvincesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiProvinces
     */
    select?: ThaiProvincesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiProvincesInclude<ExtArgs> | null
  }


  /**
   * Model ThaiDistrict
   */

  export type AggregateThaiDistrict = {
    _count: ThaiDistrictCountAggregateOutputType | null
    _avg: ThaiDistrictAvgAggregateOutputType | null
    _sum: ThaiDistrictSumAggregateOutputType | null
    _min: ThaiDistrictMinAggregateOutputType | null
    _max: ThaiDistrictMaxAggregateOutputType | null
  }

  export type ThaiDistrictAvgAggregateOutputType = {
    id: number | null
    province_id: number | null
  }

  export type ThaiDistrictSumAggregateOutputType = {
    id: number | null
    province_id: number | null
  }

  export type ThaiDistrictMinAggregateOutputType = {
    id: number | null
    name_th: string | null
    name_en: string | null
    province_id: number | null
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
  }

  export type ThaiDistrictMaxAggregateOutputType = {
    id: number | null
    name_th: string | null
    name_en: string | null
    province_id: number | null
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
  }

  export type ThaiDistrictCountAggregateOutputType = {
    id: number
    name_th: number
    name_en: number
    province_id: number
    created_at: number
    updated_at: number
    delete_at: number
    _all: number
  }


  export type ThaiDistrictAvgAggregateInputType = {
    id?: true
    province_id?: true
  }

  export type ThaiDistrictSumAggregateInputType = {
    id?: true
    province_id?: true
  }

  export type ThaiDistrictMinAggregateInputType = {
    id?: true
    name_th?: true
    name_en?: true
    province_id?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
  }

  export type ThaiDistrictMaxAggregateInputType = {
    id?: true
    name_th?: true
    name_en?: true
    province_id?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
  }

  export type ThaiDistrictCountAggregateInputType = {
    id?: true
    name_th?: true
    name_en?: true
    province_id?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
    _all?: true
  }

  export type ThaiDistrictAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThaiDistrict to aggregate.
     */
    where?: ThaiDistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiDistricts to fetch.
     */
    orderBy?: ThaiDistrictOrderByWithRelationInput | ThaiDistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThaiDistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiDistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiDistricts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThaiDistricts
    **/
    _count?: true | ThaiDistrictCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThaiDistrictAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThaiDistrictSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThaiDistrictMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThaiDistrictMaxAggregateInputType
  }

  export type GetThaiDistrictAggregateType<T extends ThaiDistrictAggregateArgs> = {
        [P in keyof T & keyof AggregateThaiDistrict]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThaiDistrict[P]>
      : GetScalarType<T[P], AggregateThaiDistrict[P]>
  }




  export type ThaiDistrictGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThaiDistrictWhereInput
    orderBy?: ThaiDistrictOrderByWithAggregationInput | ThaiDistrictOrderByWithAggregationInput[]
    by: ThaiDistrictScalarFieldEnum[] | ThaiDistrictScalarFieldEnum
    having?: ThaiDistrictScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThaiDistrictCountAggregateInputType | true
    _avg?: ThaiDistrictAvgAggregateInputType
    _sum?: ThaiDistrictSumAggregateInputType
    _min?: ThaiDistrictMinAggregateInputType
    _max?: ThaiDistrictMaxAggregateInputType
  }

  export type ThaiDistrictGroupByOutputType = {
    id: number
    name_th: string
    name_en: string
    province_id: number
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
    _count: ThaiDistrictCountAggregateOutputType | null
    _avg: ThaiDistrictAvgAggregateOutputType | null
    _sum: ThaiDistrictSumAggregateOutputType | null
    _min: ThaiDistrictMinAggregateOutputType | null
    _max: ThaiDistrictMaxAggregateOutputType | null
  }

  type GetThaiDistrictGroupByPayload<T extends ThaiDistrictGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThaiDistrictGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThaiDistrictGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThaiDistrictGroupByOutputType[P]>
            : GetScalarType<T[P], ThaiDistrictGroupByOutputType[P]>
        }
      >
    >


  export type ThaiDistrictSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_th?: boolean
    name_en?: boolean
    province_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
    province?: boolean | ThaiProvincesDefaultArgs<ExtArgs>
    subDistricts?: boolean | ThaiDistrict$subDistrictsArgs<ExtArgs>
    persons?: boolean | ThaiDistrict$personsArgs<ExtArgs>
    _count?: boolean | ThaiDistrictCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thaiDistrict"]>

  export type ThaiDistrictSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_th?: boolean
    name_en?: boolean
    province_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
    province?: boolean | ThaiProvincesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thaiDistrict"]>

  export type ThaiDistrictSelectScalar = {
    id?: boolean
    name_th?: boolean
    name_en?: boolean
    province_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
  }

  export type ThaiDistrictInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    province?: boolean | ThaiProvincesDefaultArgs<ExtArgs>
    subDistricts?: boolean | ThaiDistrict$subDistrictsArgs<ExtArgs>
    persons?: boolean | ThaiDistrict$personsArgs<ExtArgs>
    _count?: boolean | ThaiDistrictCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ThaiDistrictIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    province?: boolean | ThaiProvincesDefaultArgs<ExtArgs>
  }

  export type $ThaiDistrictPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ThaiDistrict"
    objects: {
      province: Prisma.$ThaiProvincesPayload<ExtArgs>
      subDistricts: Prisma.$ThaiSubDistrictPayload<ExtArgs>[]
      persons: Prisma.$PersonPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name_th: string
      name_en: string
      province_id: number
      created_at: Date | null
      updated_at: Date | null
      delete_at: Date | null
    }, ExtArgs["result"]["thaiDistrict"]>
    composites: {}
  }

  type ThaiDistrictGetPayload<S extends boolean | null | undefined | ThaiDistrictDefaultArgs> = $Result.GetResult<Prisma.$ThaiDistrictPayload, S>

  type ThaiDistrictCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ThaiDistrictFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ThaiDistrictCountAggregateInputType | true
    }

  export interface ThaiDistrictDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThaiDistrict'], meta: { name: 'ThaiDistrict' } }
    /**
     * Find zero or one ThaiDistrict that matches the filter.
     * @param {ThaiDistrictFindUniqueArgs} args - Arguments to find a ThaiDistrict
     * @example
     * // Get one ThaiDistrict
     * const thaiDistrict = await prisma.thaiDistrict.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThaiDistrictFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiDistrictFindUniqueArgs<ExtArgs>>
    ): Prisma__ThaiDistrictClient<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ThaiDistrict that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ThaiDistrictFindUniqueOrThrowArgs} args - Arguments to find a ThaiDistrict
     * @example
     * // Get one ThaiDistrict
     * const thaiDistrict = await prisma.thaiDistrict.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThaiDistrictFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiDistrictFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ThaiDistrictClient<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ThaiDistrict that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiDistrictFindFirstArgs} args - Arguments to find a ThaiDistrict
     * @example
     * // Get one ThaiDistrict
     * const thaiDistrict = await prisma.thaiDistrict.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThaiDistrictFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiDistrictFindFirstArgs<ExtArgs>>
    ): Prisma__ThaiDistrictClient<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ThaiDistrict that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiDistrictFindFirstOrThrowArgs} args - Arguments to find a ThaiDistrict
     * @example
     * // Get one ThaiDistrict
     * const thaiDistrict = await prisma.thaiDistrict.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThaiDistrictFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiDistrictFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ThaiDistrictClient<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ThaiDistricts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiDistrictFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThaiDistricts
     * const thaiDistricts = await prisma.thaiDistrict.findMany()
     * 
     * // Get first 10 ThaiDistricts
     * const thaiDistricts = await prisma.thaiDistrict.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thaiDistrictWithIdOnly = await prisma.thaiDistrict.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThaiDistrictFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiDistrictFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ThaiDistrict.
     * @param {ThaiDistrictCreateArgs} args - Arguments to create a ThaiDistrict.
     * @example
     * // Create one ThaiDistrict
     * const ThaiDistrict = await prisma.thaiDistrict.create({
     *   data: {
     *     // ... data to create a ThaiDistrict
     *   }
     * })
     * 
    **/
    create<T extends ThaiDistrictCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiDistrictCreateArgs<ExtArgs>>
    ): Prisma__ThaiDistrictClient<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ThaiDistricts.
     * @param {ThaiDistrictCreateManyArgs} args - Arguments to create many ThaiDistricts.
     * @example
     * // Create many ThaiDistricts
     * const thaiDistrict = await prisma.thaiDistrict.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ThaiDistrictCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiDistrictCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ThaiDistricts and returns the data saved in the database.
     * @param {ThaiDistrictCreateManyAndReturnArgs} args - Arguments to create many ThaiDistricts.
     * @example
     * // Create many ThaiDistricts
     * const thaiDistrict = await prisma.thaiDistrict.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ThaiDistricts and only return the `id`
     * const thaiDistrictWithIdOnly = await prisma.thaiDistrict.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ThaiDistrictCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiDistrictCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ThaiDistrict.
     * @param {ThaiDistrictDeleteArgs} args - Arguments to delete one ThaiDistrict.
     * @example
     * // Delete one ThaiDistrict
     * const ThaiDistrict = await prisma.thaiDistrict.delete({
     *   where: {
     *     // ... filter to delete one ThaiDistrict
     *   }
     * })
     * 
    **/
    delete<T extends ThaiDistrictDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiDistrictDeleteArgs<ExtArgs>>
    ): Prisma__ThaiDistrictClient<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ThaiDistrict.
     * @param {ThaiDistrictUpdateArgs} args - Arguments to update one ThaiDistrict.
     * @example
     * // Update one ThaiDistrict
     * const thaiDistrict = await prisma.thaiDistrict.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThaiDistrictUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiDistrictUpdateArgs<ExtArgs>>
    ): Prisma__ThaiDistrictClient<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ThaiDistricts.
     * @param {ThaiDistrictDeleteManyArgs} args - Arguments to filter ThaiDistricts to delete.
     * @example
     * // Delete a few ThaiDistricts
     * const { count } = await prisma.thaiDistrict.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThaiDistrictDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiDistrictDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThaiDistricts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiDistrictUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThaiDistricts
     * const thaiDistrict = await prisma.thaiDistrict.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThaiDistrictUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiDistrictUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ThaiDistrict.
     * @param {ThaiDistrictUpsertArgs} args - Arguments to update or create a ThaiDistrict.
     * @example
     * // Update or create a ThaiDistrict
     * const thaiDistrict = await prisma.thaiDistrict.upsert({
     *   create: {
     *     // ... data to create a ThaiDistrict
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThaiDistrict we want to update
     *   }
     * })
    **/
    upsert<T extends ThaiDistrictUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiDistrictUpsertArgs<ExtArgs>>
    ): Prisma__ThaiDistrictClient<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ThaiDistricts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiDistrictCountArgs} args - Arguments to filter ThaiDistricts to count.
     * @example
     * // Count the number of ThaiDistricts
     * const count = await prisma.thaiDistrict.count({
     *   where: {
     *     // ... the filter for the ThaiDistricts we want to count
     *   }
     * })
    **/
    count<T extends ThaiDistrictCountArgs>(
      args?: Subset<T, ThaiDistrictCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThaiDistrictCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThaiDistrict.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiDistrictAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThaiDistrictAggregateArgs>(args: Subset<T, ThaiDistrictAggregateArgs>): Prisma.PrismaPromise<GetThaiDistrictAggregateType<T>>

    /**
     * Group by ThaiDistrict.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiDistrictGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThaiDistrictGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThaiDistrictGroupByArgs['orderBy'] }
        : { orderBy?: ThaiDistrictGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThaiDistrictGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThaiDistrictGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThaiDistrict model
   */
  readonly fields: ThaiDistrictFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThaiDistrict.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThaiDistrictClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    province<T extends ThaiProvincesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThaiProvincesDefaultArgs<ExtArgs>>): Prisma__ThaiProvincesClient<$Result.GetResult<Prisma.$ThaiProvincesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    subDistricts<T extends ThaiDistrict$subDistrictsArgs<ExtArgs> = {}>(args?: Subset<T, ThaiDistrict$subDistrictsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'findMany'> | Null>;

    persons<T extends ThaiDistrict$personsArgs<ExtArgs> = {}>(args?: Subset<T, ThaiDistrict$personsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ThaiDistrict model
   */ 
  interface ThaiDistrictFieldRefs {
    readonly id: FieldRef<"ThaiDistrict", 'Int'>
    readonly name_th: FieldRef<"ThaiDistrict", 'String'>
    readonly name_en: FieldRef<"ThaiDistrict", 'String'>
    readonly province_id: FieldRef<"ThaiDistrict", 'Int'>
    readonly created_at: FieldRef<"ThaiDistrict", 'DateTime'>
    readonly updated_at: FieldRef<"ThaiDistrict", 'DateTime'>
    readonly delete_at: FieldRef<"ThaiDistrict", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ThaiDistrict findUnique
   */
  export type ThaiDistrictFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
    /**
     * Filter, which ThaiDistrict to fetch.
     */
    where: ThaiDistrictWhereUniqueInput
  }

  /**
   * ThaiDistrict findUniqueOrThrow
   */
  export type ThaiDistrictFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
    /**
     * Filter, which ThaiDistrict to fetch.
     */
    where: ThaiDistrictWhereUniqueInput
  }

  /**
   * ThaiDistrict findFirst
   */
  export type ThaiDistrictFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
    /**
     * Filter, which ThaiDistrict to fetch.
     */
    where?: ThaiDistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiDistricts to fetch.
     */
    orderBy?: ThaiDistrictOrderByWithRelationInput | ThaiDistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThaiDistricts.
     */
    cursor?: ThaiDistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiDistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiDistricts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThaiDistricts.
     */
    distinct?: ThaiDistrictScalarFieldEnum | ThaiDistrictScalarFieldEnum[]
  }

  /**
   * ThaiDistrict findFirstOrThrow
   */
  export type ThaiDistrictFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
    /**
     * Filter, which ThaiDistrict to fetch.
     */
    where?: ThaiDistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiDistricts to fetch.
     */
    orderBy?: ThaiDistrictOrderByWithRelationInput | ThaiDistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThaiDistricts.
     */
    cursor?: ThaiDistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiDistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiDistricts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThaiDistricts.
     */
    distinct?: ThaiDistrictScalarFieldEnum | ThaiDistrictScalarFieldEnum[]
  }

  /**
   * ThaiDistrict findMany
   */
  export type ThaiDistrictFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
    /**
     * Filter, which ThaiDistricts to fetch.
     */
    where?: ThaiDistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiDistricts to fetch.
     */
    orderBy?: ThaiDistrictOrderByWithRelationInput | ThaiDistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThaiDistricts.
     */
    cursor?: ThaiDistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiDistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiDistricts.
     */
    skip?: number
    distinct?: ThaiDistrictScalarFieldEnum | ThaiDistrictScalarFieldEnum[]
  }

  /**
   * ThaiDistrict create
   */
  export type ThaiDistrictCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
    /**
     * The data needed to create a ThaiDistrict.
     */
    data: XOR<ThaiDistrictCreateInput, ThaiDistrictUncheckedCreateInput>
  }

  /**
   * ThaiDistrict createMany
   */
  export type ThaiDistrictCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ThaiDistricts.
     */
    data: ThaiDistrictCreateManyInput | ThaiDistrictCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThaiDistrict createManyAndReturn
   */
  export type ThaiDistrictCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ThaiDistricts.
     */
    data: ThaiDistrictCreateManyInput | ThaiDistrictCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThaiDistrict update
   */
  export type ThaiDistrictUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
    /**
     * The data needed to update a ThaiDistrict.
     */
    data: XOR<ThaiDistrictUpdateInput, ThaiDistrictUncheckedUpdateInput>
    /**
     * Choose, which ThaiDistrict to update.
     */
    where: ThaiDistrictWhereUniqueInput
  }

  /**
   * ThaiDistrict updateMany
   */
  export type ThaiDistrictUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThaiDistricts.
     */
    data: XOR<ThaiDistrictUpdateManyMutationInput, ThaiDistrictUncheckedUpdateManyInput>
    /**
     * Filter which ThaiDistricts to update
     */
    where?: ThaiDistrictWhereInput
  }

  /**
   * ThaiDistrict upsert
   */
  export type ThaiDistrictUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
    /**
     * The filter to search for the ThaiDistrict to update in case it exists.
     */
    where: ThaiDistrictWhereUniqueInput
    /**
     * In case the ThaiDistrict found by the `where` argument doesn't exist, create a new ThaiDistrict with this data.
     */
    create: XOR<ThaiDistrictCreateInput, ThaiDistrictUncheckedCreateInput>
    /**
     * In case the ThaiDistrict was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThaiDistrictUpdateInput, ThaiDistrictUncheckedUpdateInput>
  }

  /**
   * ThaiDistrict delete
   */
  export type ThaiDistrictDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
    /**
     * Filter which ThaiDistrict to delete.
     */
    where: ThaiDistrictWhereUniqueInput
  }

  /**
   * ThaiDistrict deleteMany
   */
  export type ThaiDistrictDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThaiDistricts to delete
     */
    where?: ThaiDistrictWhereInput
  }

  /**
   * ThaiDistrict.subDistricts
   */
  export type ThaiDistrict$subDistrictsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
    where?: ThaiSubDistrictWhereInput
    orderBy?: ThaiSubDistrictOrderByWithRelationInput | ThaiSubDistrictOrderByWithRelationInput[]
    cursor?: ThaiSubDistrictWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThaiSubDistrictScalarFieldEnum | ThaiSubDistrictScalarFieldEnum[]
  }

  /**
   * ThaiDistrict.persons
   */
  export type ThaiDistrict$personsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    cursor?: PersonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * ThaiDistrict without action
   */
  export type ThaiDistrictDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiDistrict
     */
    select?: ThaiDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiDistrictInclude<ExtArgs> | null
  }


  /**
   * Model ThaiSubDistrict
   */

  export type AggregateThaiSubDistrict = {
    _count: ThaiSubDistrictCountAggregateOutputType | null
    _avg: ThaiSubDistrictAvgAggregateOutputType | null
    _sum: ThaiSubDistrictSumAggregateOutputType | null
    _min: ThaiSubDistrictMinAggregateOutputType | null
    _max: ThaiSubDistrictMaxAggregateOutputType | null
  }

  export type ThaiSubDistrictAvgAggregateOutputType = {
    id: number | null
    zip_code: number | null
    district_id: number | null
  }

  export type ThaiSubDistrictSumAggregateOutputType = {
    id: number | null
    zip_code: number | null
    district_id: number | null
  }

  export type ThaiSubDistrictMinAggregateOutputType = {
    id: number | null
    name_th: string | null
    name_en: string | null
    zip_code: number | null
    district_id: number | null
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
  }

  export type ThaiSubDistrictMaxAggregateOutputType = {
    id: number | null
    name_th: string | null
    name_en: string | null
    zip_code: number | null
    district_id: number | null
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
  }

  export type ThaiSubDistrictCountAggregateOutputType = {
    id: number
    name_th: number
    name_en: number
    zip_code: number
    district_id: number
    created_at: number
    updated_at: number
    delete_at: number
    _all: number
  }


  export type ThaiSubDistrictAvgAggregateInputType = {
    id?: true
    zip_code?: true
    district_id?: true
  }

  export type ThaiSubDistrictSumAggregateInputType = {
    id?: true
    zip_code?: true
    district_id?: true
  }

  export type ThaiSubDistrictMinAggregateInputType = {
    id?: true
    name_th?: true
    name_en?: true
    zip_code?: true
    district_id?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
  }

  export type ThaiSubDistrictMaxAggregateInputType = {
    id?: true
    name_th?: true
    name_en?: true
    zip_code?: true
    district_id?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
  }

  export type ThaiSubDistrictCountAggregateInputType = {
    id?: true
    name_th?: true
    name_en?: true
    zip_code?: true
    district_id?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
    _all?: true
  }

  export type ThaiSubDistrictAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThaiSubDistrict to aggregate.
     */
    where?: ThaiSubDistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiSubDistricts to fetch.
     */
    orderBy?: ThaiSubDistrictOrderByWithRelationInput | ThaiSubDistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThaiSubDistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiSubDistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiSubDistricts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThaiSubDistricts
    **/
    _count?: true | ThaiSubDistrictCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThaiSubDistrictAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThaiSubDistrictSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThaiSubDistrictMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThaiSubDistrictMaxAggregateInputType
  }

  export type GetThaiSubDistrictAggregateType<T extends ThaiSubDistrictAggregateArgs> = {
        [P in keyof T & keyof AggregateThaiSubDistrict]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThaiSubDistrict[P]>
      : GetScalarType<T[P], AggregateThaiSubDistrict[P]>
  }




  export type ThaiSubDistrictGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThaiSubDistrictWhereInput
    orderBy?: ThaiSubDistrictOrderByWithAggregationInput | ThaiSubDistrictOrderByWithAggregationInput[]
    by: ThaiSubDistrictScalarFieldEnum[] | ThaiSubDistrictScalarFieldEnum
    having?: ThaiSubDistrictScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThaiSubDistrictCountAggregateInputType | true
    _avg?: ThaiSubDistrictAvgAggregateInputType
    _sum?: ThaiSubDistrictSumAggregateInputType
    _min?: ThaiSubDistrictMinAggregateInputType
    _max?: ThaiSubDistrictMaxAggregateInputType
  }

  export type ThaiSubDistrictGroupByOutputType = {
    id: number
    name_th: string
    name_en: string
    zip_code: number
    district_id: number
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
    _count: ThaiSubDistrictCountAggregateOutputType | null
    _avg: ThaiSubDistrictAvgAggregateOutputType | null
    _sum: ThaiSubDistrictSumAggregateOutputType | null
    _min: ThaiSubDistrictMinAggregateOutputType | null
    _max: ThaiSubDistrictMaxAggregateOutputType | null
  }

  type GetThaiSubDistrictGroupByPayload<T extends ThaiSubDistrictGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThaiSubDistrictGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThaiSubDistrictGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThaiSubDistrictGroupByOutputType[P]>
            : GetScalarType<T[P], ThaiSubDistrictGroupByOutputType[P]>
        }
      >
    >


  export type ThaiSubDistrictSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_th?: boolean
    name_en?: boolean
    zip_code?: boolean
    district_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
    district?: boolean | ThaiDistrictDefaultArgs<ExtArgs>
    persons?: boolean | ThaiSubDistrict$personsArgs<ExtArgs>
    _count?: boolean | ThaiSubDistrictCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thaiSubDistrict"]>

  export type ThaiSubDistrictSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_th?: boolean
    name_en?: boolean
    zip_code?: boolean
    district_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
    district?: boolean | ThaiDistrictDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thaiSubDistrict"]>

  export type ThaiSubDistrictSelectScalar = {
    id?: boolean
    name_th?: boolean
    name_en?: boolean
    zip_code?: boolean
    district_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
  }

  export type ThaiSubDistrictInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    district?: boolean | ThaiDistrictDefaultArgs<ExtArgs>
    persons?: boolean | ThaiSubDistrict$personsArgs<ExtArgs>
    _count?: boolean | ThaiSubDistrictCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ThaiSubDistrictIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    district?: boolean | ThaiDistrictDefaultArgs<ExtArgs>
  }

  export type $ThaiSubDistrictPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ThaiSubDistrict"
    objects: {
      district: Prisma.$ThaiDistrictPayload<ExtArgs>
      persons: Prisma.$PersonPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name_th: string
      name_en: string
      zip_code: number
      district_id: number
      created_at: Date | null
      updated_at: Date | null
      delete_at: Date | null
    }, ExtArgs["result"]["thaiSubDistrict"]>
    composites: {}
  }

  type ThaiSubDistrictGetPayload<S extends boolean | null | undefined | ThaiSubDistrictDefaultArgs> = $Result.GetResult<Prisma.$ThaiSubDistrictPayload, S>

  type ThaiSubDistrictCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ThaiSubDistrictFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ThaiSubDistrictCountAggregateInputType | true
    }

  export interface ThaiSubDistrictDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThaiSubDistrict'], meta: { name: 'ThaiSubDistrict' } }
    /**
     * Find zero or one ThaiSubDistrict that matches the filter.
     * @param {ThaiSubDistrictFindUniqueArgs} args - Arguments to find a ThaiSubDistrict
     * @example
     * // Get one ThaiSubDistrict
     * const thaiSubDistrict = await prisma.thaiSubDistrict.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThaiSubDistrictFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiSubDistrictFindUniqueArgs<ExtArgs>>
    ): Prisma__ThaiSubDistrictClient<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ThaiSubDistrict that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ThaiSubDistrictFindUniqueOrThrowArgs} args - Arguments to find a ThaiSubDistrict
     * @example
     * // Get one ThaiSubDistrict
     * const thaiSubDistrict = await prisma.thaiSubDistrict.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThaiSubDistrictFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiSubDistrictFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ThaiSubDistrictClient<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ThaiSubDistrict that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiSubDistrictFindFirstArgs} args - Arguments to find a ThaiSubDistrict
     * @example
     * // Get one ThaiSubDistrict
     * const thaiSubDistrict = await prisma.thaiSubDistrict.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThaiSubDistrictFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiSubDistrictFindFirstArgs<ExtArgs>>
    ): Prisma__ThaiSubDistrictClient<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ThaiSubDistrict that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiSubDistrictFindFirstOrThrowArgs} args - Arguments to find a ThaiSubDistrict
     * @example
     * // Get one ThaiSubDistrict
     * const thaiSubDistrict = await prisma.thaiSubDistrict.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThaiSubDistrictFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiSubDistrictFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ThaiSubDistrictClient<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ThaiSubDistricts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiSubDistrictFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThaiSubDistricts
     * const thaiSubDistricts = await prisma.thaiSubDistrict.findMany()
     * 
     * // Get first 10 ThaiSubDistricts
     * const thaiSubDistricts = await prisma.thaiSubDistrict.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thaiSubDistrictWithIdOnly = await prisma.thaiSubDistrict.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThaiSubDistrictFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiSubDistrictFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ThaiSubDistrict.
     * @param {ThaiSubDistrictCreateArgs} args - Arguments to create a ThaiSubDistrict.
     * @example
     * // Create one ThaiSubDistrict
     * const ThaiSubDistrict = await prisma.thaiSubDistrict.create({
     *   data: {
     *     // ... data to create a ThaiSubDistrict
     *   }
     * })
     * 
    **/
    create<T extends ThaiSubDistrictCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiSubDistrictCreateArgs<ExtArgs>>
    ): Prisma__ThaiSubDistrictClient<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ThaiSubDistricts.
     * @param {ThaiSubDistrictCreateManyArgs} args - Arguments to create many ThaiSubDistricts.
     * @example
     * // Create many ThaiSubDistricts
     * const thaiSubDistrict = await prisma.thaiSubDistrict.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ThaiSubDistrictCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiSubDistrictCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ThaiSubDistricts and returns the data saved in the database.
     * @param {ThaiSubDistrictCreateManyAndReturnArgs} args - Arguments to create many ThaiSubDistricts.
     * @example
     * // Create many ThaiSubDistricts
     * const thaiSubDistrict = await prisma.thaiSubDistrict.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ThaiSubDistricts and only return the `id`
     * const thaiSubDistrictWithIdOnly = await prisma.thaiSubDistrict.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ThaiSubDistrictCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiSubDistrictCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ThaiSubDistrict.
     * @param {ThaiSubDistrictDeleteArgs} args - Arguments to delete one ThaiSubDistrict.
     * @example
     * // Delete one ThaiSubDistrict
     * const ThaiSubDistrict = await prisma.thaiSubDistrict.delete({
     *   where: {
     *     // ... filter to delete one ThaiSubDistrict
     *   }
     * })
     * 
    **/
    delete<T extends ThaiSubDistrictDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiSubDistrictDeleteArgs<ExtArgs>>
    ): Prisma__ThaiSubDistrictClient<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ThaiSubDistrict.
     * @param {ThaiSubDistrictUpdateArgs} args - Arguments to update one ThaiSubDistrict.
     * @example
     * // Update one ThaiSubDistrict
     * const thaiSubDistrict = await prisma.thaiSubDistrict.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThaiSubDistrictUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiSubDistrictUpdateArgs<ExtArgs>>
    ): Prisma__ThaiSubDistrictClient<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ThaiSubDistricts.
     * @param {ThaiSubDistrictDeleteManyArgs} args - Arguments to filter ThaiSubDistricts to delete.
     * @example
     * // Delete a few ThaiSubDistricts
     * const { count } = await prisma.thaiSubDistrict.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThaiSubDistrictDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThaiSubDistrictDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThaiSubDistricts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiSubDistrictUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThaiSubDistricts
     * const thaiSubDistrict = await prisma.thaiSubDistrict.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThaiSubDistrictUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiSubDistrictUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ThaiSubDistrict.
     * @param {ThaiSubDistrictUpsertArgs} args - Arguments to update or create a ThaiSubDistrict.
     * @example
     * // Update or create a ThaiSubDistrict
     * const thaiSubDistrict = await prisma.thaiSubDistrict.upsert({
     *   create: {
     *     // ... data to create a ThaiSubDistrict
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThaiSubDistrict we want to update
     *   }
     * })
    **/
    upsert<T extends ThaiSubDistrictUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ThaiSubDistrictUpsertArgs<ExtArgs>>
    ): Prisma__ThaiSubDistrictClient<$Result.GetResult<Prisma.$ThaiSubDistrictPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ThaiSubDistricts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiSubDistrictCountArgs} args - Arguments to filter ThaiSubDistricts to count.
     * @example
     * // Count the number of ThaiSubDistricts
     * const count = await prisma.thaiSubDistrict.count({
     *   where: {
     *     // ... the filter for the ThaiSubDistricts we want to count
     *   }
     * })
    **/
    count<T extends ThaiSubDistrictCountArgs>(
      args?: Subset<T, ThaiSubDistrictCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThaiSubDistrictCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThaiSubDistrict.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiSubDistrictAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThaiSubDistrictAggregateArgs>(args: Subset<T, ThaiSubDistrictAggregateArgs>): Prisma.PrismaPromise<GetThaiSubDistrictAggregateType<T>>

    /**
     * Group by ThaiSubDistrict.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiSubDistrictGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThaiSubDistrictGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThaiSubDistrictGroupByArgs['orderBy'] }
        : { orderBy?: ThaiSubDistrictGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThaiSubDistrictGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThaiSubDistrictGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThaiSubDistrict model
   */
  readonly fields: ThaiSubDistrictFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThaiSubDistrict.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThaiSubDistrictClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    district<T extends ThaiDistrictDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThaiDistrictDefaultArgs<ExtArgs>>): Prisma__ThaiDistrictClient<$Result.GetResult<Prisma.$ThaiDistrictPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    persons<T extends ThaiSubDistrict$personsArgs<ExtArgs> = {}>(args?: Subset<T, ThaiSubDistrict$personsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ThaiSubDistrict model
   */ 
  interface ThaiSubDistrictFieldRefs {
    readonly id: FieldRef<"ThaiSubDistrict", 'Int'>
    readonly name_th: FieldRef<"ThaiSubDistrict", 'String'>
    readonly name_en: FieldRef<"ThaiSubDistrict", 'String'>
    readonly zip_code: FieldRef<"ThaiSubDistrict", 'Int'>
    readonly district_id: FieldRef<"ThaiSubDistrict", 'Int'>
    readonly created_at: FieldRef<"ThaiSubDistrict", 'DateTime'>
    readonly updated_at: FieldRef<"ThaiSubDistrict", 'DateTime'>
    readonly delete_at: FieldRef<"ThaiSubDistrict", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ThaiSubDistrict findUnique
   */
  export type ThaiSubDistrictFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
    /**
     * Filter, which ThaiSubDistrict to fetch.
     */
    where: ThaiSubDistrictWhereUniqueInput
  }

  /**
   * ThaiSubDistrict findUniqueOrThrow
   */
  export type ThaiSubDistrictFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
    /**
     * Filter, which ThaiSubDistrict to fetch.
     */
    where: ThaiSubDistrictWhereUniqueInput
  }

  /**
   * ThaiSubDistrict findFirst
   */
  export type ThaiSubDistrictFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
    /**
     * Filter, which ThaiSubDistrict to fetch.
     */
    where?: ThaiSubDistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiSubDistricts to fetch.
     */
    orderBy?: ThaiSubDistrictOrderByWithRelationInput | ThaiSubDistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThaiSubDistricts.
     */
    cursor?: ThaiSubDistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiSubDistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiSubDistricts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThaiSubDistricts.
     */
    distinct?: ThaiSubDistrictScalarFieldEnum | ThaiSubDistrictScalarFieldEnum[]
  }

  /**
   * ThaiSubDistrict findFirstOrThrow
   */
  export type ThaiSubDistrictFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
    /**
     * Filter, which ThaiSubDistrict to fetch.
     */
    where?: ThaiSubDistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiSubDistricts to fetch.
     */
    orderBy?: ThaiSubDistrictOrderByWithRelationInput | ThaiSubDistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThaiSubDistricts.
     */
    cursor?: ThaiSubDistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiSubDistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiSubDistricts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThaiSubDistricts.
     */
    distinct?: ThaiSubDistrictScalarFieldEnum | ThaiSubDistrictScalarFieldEnum[]
  }

  /**
   * ThaiSubDistrict findMany
   */
  export type ThaiSubDistrictFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
    /**
     * Filter, which ThaiSubDistricts to fetch.
     */
    where?: ThaiSubDistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThaiSubDistricts to fetch.
     */
    orderBy?: ThaiSubDistrictOrderByWithRelationInput | ThaiSubDistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThaiSubDistricts.
     */
    cursor?: ThaiSubDistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThaiSubDistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThaiSubDistricts.
     */
    skip?: number
    distinct?: ThaiSubDistrictScalarFieldEnum | ThaiSubDistrictScalarFieldEnum[]
  }

  /**
   * ThaiSubDistrict create
   */
  export type ThaiSubDistrictCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
    /**
     * The data needed to create a ThaiSubDistrict.
     */
    data: XOR<ThaiSubDistrictCreateInput, ThaiSubDistrictUncheckedCreateInput>
  }

  /**
   * ThaiSubDistrict createMany
   */
  export type ThaiSubDistrictCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ThaiSubDistricts.
     */
    data: ThaiSubDistrictCreateManyInput | ThaiSubDistrictCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThaiSubDistrict createManyAndReturn
   */
  export type ThaiSubDistrictCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ThaiSubDistricts.
     */
    data: ThaiSubDistrictCreateManyInput | ThaiSubDistrictCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThaiSubDistrict update
   */
  export type ThaiSubDistrictUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
    /**
     * The data needed to update a ThaiSubDistrict.
     */
    data: XOR<ThaiSubDistrictUpdateInput, ThaiSubDistrictUncheckedUpdateInput>
    /**
     * Choose, which ThaiSubDistrict to update.
     */
    where: ThaiSubDistrictWhereUniqueInput
  }

  /**
   * ThaiSubDistrict updateMany
   */
  export type ThaiSubDistrictUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThaiSubDistricts.
     */
    data: XOR<ThaiSubDistrictUpdateManyMutationInput, ThaiSubDistrictUncheckedUpdateManyInput>
    /**
     * Filter which ThaiSubDistricts to update
     */
    where?: ThaiSubDistrictWhereInput
  }

  /**
   * ThaiSubDistrict upsert
   */
  export type ThaiSubDistrictUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
    /**
     * The filter to search for the ThaiSubDistrict to update in case it exists.
     */
    where: ThaiSubDistrictWhereUniqueInput
    /**
     * In case the ThaiSubDistrict found by the `where` argument doesn't exist, create a new ThaiSubDistrict with this data.
     */
    create: XOR<ThaiSubDistrictCreateInput, ThaiSubDistrictUncheckedCreateInput>
    /**
     * In case the ThaiSubDistrict was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThaiSubDistrictUpdateInput, ThaiSubDistrictUncheckedUpdateInput>
  }

  /**
   * ThaiSubDistrict delete
   */
  export type ThaiSubDistrictDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
    /**
     * Filter which ThaiSubDistrict to delete.
     */
    where: ThaiSubDistrictWhereUniqueInput
  }

  /**
   * ThaiSubDistrict deleteMany
   */
  export type ThaiSubDistrictDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThaiSubDistricts to delete
     */
    where?: ThaiSubDistrictWhereInput
  }

  /**
   * ThaiSubDistrict.persons
   */
  export type ThaiSubDistrict$personsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    cursor?: PersonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * ThaiSubDistrict without action
   */
  export type ThaiSubDistrictDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiSubDistrict
     */
    select?: ThaiSubDistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThaiSubDistrictInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PersonScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    middle_name: 'middle_name',
    last_name: 'last_name',
    gender: 'gender',
    birth_date: 'birth_date',
    age: 'age',
    address: 'address',
    sub_district_id: 'sub_district_id',
    district_id: 'district_id',
    province_id: 'province_id',
    zip_code: 'zip_code',
    id_card: 'id_card',
    expire_id_card: 'expire_id_card',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const ThaiGeographiesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ThaiGeographiesScalarFieldEnum = (typeof ThaiGeographiesScalarFieldEnum)[keyof typeof ThaiGeographiesScalarFieldEnum]


  export const ThaiProvincesScalarFieldEnum: {
    id: 'id',
    name_th: 'name_th',
    name_en: 'name_en',
    geography_id: 'geography_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    delete_at: 'delete_at'
  };

  export type ThaiProvincesScalarFieldEnum = (typeof ThaiProvincesScalarFieldEnum)[keyof typeof ThaiProvincesScalarFieldEnum]


  export const ThaiDistrictScalarFieldEnum: {
    id: 'id',
    name_th: 'name_th',
    name_en: 'name_en',
    province_id: 'province_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    delete_at: 'delete_at'
  };

  export type ThaiDistrictScalarFieldEnum = (typeof ThaiDistrictScalarFieldEnum)[keyof typeof ThaiDistrictScalarFieldEnum]


  export const ThaiSubDistrictScalarFieldEnum: {
    id: 'id',
    name_th: 'name_th',
    name_en: 'name_en',
    zip_code: 'zip_code',
    district_id: 'district_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    delete_at: 'delete_at'
  };

  export type ThaiSubDistrictScalarFieldEnum = (typeof ThaiSubDistrictScalarFieldEnum)[keyof typeof ThaiSubDistrictScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PersonWhereInput = {
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    id?: IntFilter<"Person"> | number
    first_name?: StringFilter<"Person"> | string
    middle_name?: StringNullableFilter<"Person"> | string | null
    last_name?: StringFilter<"Person"> | string
    gender?: StringFilter<"Person"> | string
    birth_date?: DateTimeFilter<"Person"> | Date | string
    age?: IntFilter<"Person"> | number
    address?: StringFilter<"Person"> | string
    sub_district_id?: IntFilter<"Person"> | number
    district_id?: IntFilter<"Person"> | number
    province_id?: IntFilter<"Person"> | number
    zip_code?: StringFilter<"Person"> | string
    id_card?: StringFilter<"Person"> | string
    expire_id_card?: DateTimeFilter<"Person"> | Date | string
    created_at?: DateTimeFilter<"Person"> | Date | string
    updated_at?: DateTimeFilter<"Person"> | Date | string
    province?: XOR<ThaiProvincesRelationFilter, ThaiProvincesWhereInput>
    district?: XOR<ThaiDistrictRelationFilter, ThaiDistrictWhereInput>
    subDistrict?: XOR<ThaiSubDistrictRelationFilter, ThaiSubDistrictWhereInput>
  }

  export type PersonOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrderInput | SortOrder
    last_name?: SortOrder
    gender?: SortOrder
    birth_date?: SortOrder
    age?: SortOrder
    address?: SortOrder
    sub_district_id?: SortOrder
    district_id?: SortOrder
    province_id?: SortOrder
    zip_code?: SortOrder
    id_card?: SortOrder
    expire_id_card?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    province?: ThaiProvincesOrderByWithRelationInput
    district?: ThaiDistrictOrderByWithRelationInput
    subDistrict?: ThaiSubDistrictOrderByWithRelationInput
  }

  export type PersonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_card?: string
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    first_name?: StringFilter<"Person"> | string
    middle_name?: StringNullableFilter<"Person"> | string | null
    last_name?: StringFilter<"Person"> | string
    gender?: StringFilter<"Person"> | string
    birth_date?: DateTimeFilter<"Person"> | Date | string
    age?: IntFilter<"Person"> | number
    address?: StringFilter<"Person"> | string
    sub_district_id?: IntFilter<"Person"> | number
    district_id?: IntFilter<"Person"> | number
    province_id?: IntFilter<"Person"> | number
    zip_code?: StringFilter<"Person"> | string
    expire_id_card?: DateTimeFilter<"Person"> | Date | string
    created_at?: DateTimeFilter<"Person"> | Date | string
    updated_at?: DateTimeFilter<"Person"> | Date | string
    province?: XOR<ThaiProvincesRelationFilter, ThaiProvincesWhereInput>
    district?: XOR<ThaiDistrictRelationFilter, ThaiDistrictWhereInput>
    subDistrict?: XOR<ThaiSubDistrictRelationFilter, ThaiSubDistrictWhereInput>
  }, "id" | "id_card">

  export type PersonOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrderInput | SortOrder
    last_name?: SortOrder
    gender?: SortOrder
    birth_date?: SortOrder
    age?: SortOrder
    address?: SortOrder
    sub_district_id?: SortOrder
    district_id?: SortOrder
    province_id?: SortOrder
    zip_code?: SortOrder
    id_card?: SortOrder
    expire_id_card?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PersonCountOrderByAggregateInput
    _avg?: PersonAvgOrderByAggregateInput
    _max?: PersonMaxOrderByAggregateInput
    _min?: PersonMinOrderByAggregateInput
    _sum?: PersonSumOrderByAggregateInput
  }

  export type PersonScalarWhereWithAggregatesInput = {
    AND?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    OR?: PersonScalarWhereWithAggregatesInput[]
    NOT?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Person"> | number
    first_name?: StringWithAggregatesFilter<"Person"> | string
    middle_name?: StringNullableWithAggregatesFilter<"Person"> | string | null
    last_name?: StringWithAggregatesFilter<"Person"> | string
    gender?: StringWithAggregatesFilter<"Person"> | string
    birth_date?: DateTimeWithAggregatesFilter<"Person"> | Date | string
    age?: IntWithAggregatesFilter<"Person"> | number
    address?: StringWithAggregatesFilter<"Person"> | string
    sub_district_id?: IntWithAggregatesFilter<"Person"> | number
    district_id?: IntWithAggregatesFilter<"Person"> | number
    province_id?: IntWithAggregatesFilter<"Person"> | number
    zip_code?: StringWithAggregatesFilter<"Person"> | string
    id_card?: StringWithAggregatesFilter<"Person"> | string
    expire_id_card?: DateTimeWithAggregatesFilter<"Person"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"Person"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Person"> | Date | string
  }

  export type ThaiGeographiesWhereInput = {
    AND?: ThaiGeographiesWhereInput | ThaiGeographiesWhereInput[]
    OR?: ThaiGeographiesWhereInput[]
    NOT?: ThaiGeographiesWhereInput | ThaiGeographiesWhereInput[]
    id?: IntFilter<"ThaiGeographies"> | number
    name?: StringFilter<"ThaiGeographies"> | string
    provinces?: ThaiProvincesListRelationFilter
  }

  export type ThaiGeographiesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    provinces?: ThaiProvincesOrderByRelationAggregateInput
  }

  export type ThaiGeographiesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ThaiGeographiesWhereInput | ThaiGeographiesWhereInput[]
    OR?: ThaiGeographiesWhereInput[]
    NOT?: ThaiGeographiesWhereInput | ThaiGeographiesWhereInput[]
    name?: StringFilter<"ThaiGeographies"> | string
    provinces?: ThaiProvincesListRelationFilter
  }, "id">

  export type ThaiGeographiesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ThaiGeographiesCountOrderByAggregateInput
    _avg?: ThaiGeographiesAvgOrderByAggregateInput
    _max?: ThaiGeographiesMaxOrderByAggregateInput
    _min?: ThaiGeographiesMinOrderByAggregateInput
    _sum?: ThaiGeographiesSumOrderByAggregateInput
  }

  export type ThaiGeographiesScalarWhereWithAggregatesInput = {
    AND?: ThaiGeographiesScalarWhereWithAggregatesInput | ThaiGeographiesScalarWhereWithAggregatesInput[]
    OR?: ThaiGeographiesScalarWhereWithAggregatesInput[]
    NOT?: ThaiGeographiesScalarWhereWithAggregatesInput | ThaiGeographiesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ThaiGeographies"> | number
    name?: StringWithAggregatesFilter<"ThaiGeographies"> | string
  }

  export type ThaiProvincesWhereInput = {
    AND?: ThaiProvincesWhereInput | ThaiProvincesWhereInput[]
    OR?: ThaiProvincesWhereInput[]
    NOT?: ThaiProvincesWhereInput | ThaiProvincesWhereInput[]
    id?: IntFilter<"ThaiProvinces"> | number
    name_th?: StringFilter<"ThaiProvinces"> | string
    name_en?: StringFilter<"ThaiProvinces"> | string
    geography_id?: IntFilter<"ThaiProvinces"> | number
    created_at?: DateTimeNullableFilter<"ThaiProvinces"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ThaiProvinces"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ThaiProvinces"> | Date | string | null
    geography?: XOR<ThaiGeographiesRelationFilter, ThaiGeographiesWhereInput>
    districts?: ThaiDistrictListRelationFilter
    persons?: PersonListRelationFilter
  }

  export type ThaiProvincesOrderByWithRelationInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    geography_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    delete_at?: SortOrderInput | SortOrder
    geography?: ThaiGeographiesOrderByWithRelationInput
    districts?: ThaiDistrictOrderByRelationAggregateInput
    persons?: PersonOrderByRelationAggregateInput
  }

  export type ThaiProvincesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ThaiProvincesWhereInput | ThaiProvincesWhereInput[]
    OR?: ThaiProvincesWhereInput[]
    NOT?: ThaiProvincesWhereInput | ThaiProvincesWhereInput[]
    name_th?: StringFilter<"ThaiProvinces"> | string
    name_en?: StringFilter<"ThaiProvinces"> | string
    geography_id?: IntFilter<"ThaiProvinces"> | number
    created_at?: DateTimeNullableFilter<"ThaiProvinces"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ThaiProvinces"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ThaiProvinces"> | Date | string | null
    geography?: XOR<ThaiGeographiesRelationFilter, ThaiGeographiesWhereInput>
    districts?: ThaiDistrictListRelationFilter
    persons?: PersonListRelationFilter
  }, "id">

  export type ThaiProvincesOrderByWithAggregationInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    geography_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    delete_at?: SortOrderInput | SortOrder
    _count?: ThaiProvincesCountOrderByAggregateInput
    _avg?: ThaiProvincesAvgOrderByAggregateInput
    _max?: ThaiProvincesMaxOrderByAggregateInput
    _min?: ThaiProvincesMinOrderByAggregateInput
    _sum?: ThaiProvincesSumOrderByAggregateInput
  }

  export type ThaiProvincesScalarWhereWithAggregatesInput = {
    AND?: ThaiProvincesScalarWhereWithAggregatesInput | ThaiProvincesScalarWhereWithAggregatesInput[]
    OR?: ThaiProvincesScalarWhereWithAggregatesInput[]
    NOT?: ThaiProvincesScalarWhereWithAggregatesInput | ThaiProvincesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ThaiProvinces"> | number
    name_th?: StringWithAggregatesFilter<"ThaiProvinces"> | string
    name_en?: StringWithAggregatesFilter<"ThaiProvinces"> | string
    geography_id?: IntWithAggregatesFilter<"ThaiProvinces"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"ThaiProvinces"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"ThaiProvinces"> | Date | string | null
    delete_at?: DateTimeNullableWithAggregatesFilter<"ThaiProvinces"> | Date | string | null
  }

  export type ThaiDistrictWhereInput = {
    AND?: ThaiDistrictWhereInput | ThaiDistrictWhereInput[]
    OR?: ThaiDistrictWhereInput[]
    NOT?: ThaiDistrictWhereInput | ThaiDistrictWhereInput[]
    id?: IntFilter<"ThaiDistrict"> | number
    name_th?: StringFilter<"ThaiDistrict"> | string
    name_en?: StringFilter<"ThaiDistrict"> | string
    province_id?: IntFilter<"ThaiDistrict"> | number
    created_at?: DateTimeNullableFilter<"ThaiDistrict"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ThaiDistrict"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ThaiDistrict"> | Date | string | null
    province?: XOR<ThaiProvincesRelationFilter, ThaiProvincesWhereInput>
    subDistricts?: ThaiSubDistrictListRelationFilter
    persons?: PersonListRelationFilter
  }

  export type ThaiDistrictOrderByWithRelationInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    province_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    delete_at?: SortOrderInput | SortOrder
    province?: ThaiProvincesOrderByWithRelationInput
    subDistricts?: ThaiSubDistrictOrderByRelationAggregateInput
    persons?: PersonOrderByRelationAggregateInput
  }

  export type ThaiDistrictWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ThaiDistrictWhereInput | ThaiDistrictWhereInput[]
    OR?: ThaiDistrictWhereInput[]
    NOT?: ThaiDistrictWhereInput | ThaiDistrictWhereInput[]
    name_th?: StringFilter<"ThaiDistrict"> | string
    name_en?: StringFilter<"ThaiDistrict"> | string
    province_id?: IntFilter<"ThaiDistrict"> | number
    created_at?: DateTimeNullableFilter<"ThaiDistrict"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ThaiDistrict"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ThaiDistrict"> | Date | string | null
    province?: XOR<ThaiProvincesRelationFilter, ThaiProvincesWhereInput>
    subDistricts?: ThaiSubDistrictListRelationFilter
    persons?: PersonListRelationFilter
  }, "id">

  export type ThaiDistrictOrderByWithAggregationInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    province_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    delete_at?: SortOrderInput | SortOrder
    _count?: ThaiDistrictCountOrderByAggregateInput
    _avg?: ThaiDistrictAvgOrderByAggregateInput
    _max?: ThaiDistrictMaxOrderByAggregateInput
    _min?: ThaiDistrictMinOrderByAggregateInput
    _sum?: ThaiDistrictSumOrderByAggregateInput
  }

  export type ThaiDistrictScalarWhereWithAggregatesInput = {
    AND?: ThaiDistrictScalarWhereWithAggregatesInput | ThaiDistrictScalarWhereWithAggregatesInput[]
    OR?: ThaiDistrictScalarWhereWithAggregatesInput[]
    NOT?: ThaiDistrictScalarWhereWithAggregatesInput | ThaiDistrictScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ThaiDistrict"> | number
    name_th?: StringWithAggregatesFilter<"ThaiDistrict"> | string
    name_en?: StringWithAggregatesFilter<"ThaiDistrict"> | string
    province_id?: IntWithAggregatesFilter<"ThaiDistrict"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"ThaiDistrict"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"ThaiDistrict"> | Date | string | null
    delete_at?: DateTimeNullableWithAggregatesFilter<"ThaiDistrict"> | Date | string | null
  }

  export type ThaiSubDistrictWhereInput = {
    AND?: ThaiSubDistrictWhereInput | ThaiSubDistrictWhereInput[]
    OR?: ThaiSubDistrictWhereInput[]
    NOT?: ThaiSubDistrictWhereInput | ThaiSubDistrictWhereInput[]
    id?: IntFilter<"ThaiSubDistrict"> | number
    name_th?: StringFilter<"ThaiSubDistrict"> | string
    name_en?: StringFilter<"ThaiSubDistrict"> | string
    zip_code?: IntFilter<"ThaiSubDistrict"> | number
    district_id?: IntFilter<"ThaiSubDistrict"> | number
    created_at?: DateTimeNullableFilter<"ThaiSubDistrict"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ThaiSubDistrict"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ThaiSubDistrict"> | Date | string | null
    district?: XOR<ThaiDistrictRelationFilter, ThaiDistrictWhereInput>
    persons?: PersonListRelationFilter
  }

  export type ThaiSubDistrictOrderByWithRelationInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    zip_code?: SortOrder
    district_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    delete_at?: SortOrderInput | SortOrder
    district?: ThaiDistrictOrderByWithRelationInput
    persons?: PersonOrderByRelationAggregateInput
  }

  export type ThaiSubDistrictWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ThaiSubDistrictWhereInput | ThaiSubDistrictWhereInput[]
    OR?: ThaiSubDistrictWhereInput[]
    NOT?: ThaiSubDistrictWhereInput | ThaiSubDistrictWhereInput[]
    name_th?: StringFilter<"ThaiSubDistrict"> | string
    name_en?: StringFilter<"ThaiSubDistrict"> | string
    zip_code?: IntFilter<"ThaiSubDistrict"> | number
    district_id?: IntFilter<"ThaiSubDistrict"> | number
    created_at?: DateTimeNullableFilter<"ThaiSubDistrict"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ThaiSubDistrict"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ThaiSubDistrict"> | Date | string | null
    district?: XOR<ThaiDistrictRelationFilter, ThaiDistrictWhereInput>
    persons?: PersonListRelationFilter
  }, "id">

  export type ThaiSubDistrictOrderByWithAggregationInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    zip_code?: SortOrder
    district_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    delete_at?: SortOrderInput | SortOrder
    _count?: ThaiSubDistrictCountOrderByAggregateInput
    _avg?: ThaiSubDistrictAvgOrderByAggregateInput
    _max?: ThaiSubDistrictMaxOrderByAggregateInput
    _min?: ThaiSubDistrictMinOrderByAggregateInput
    _sum?: ThaiSubDistrictSumOrderByAggregateInput
  }

  export type ThaiSubDistrictScalarWhereWithAggregatesInput = {
    AND?: ThaiSubDistrictScalarWhereWithAggregatesInput | ThaiSubDistrictScalarWhereWithAggregatesInput[]
    OR?: ThaiSubDistrictScalarWhereWithAggregatesInput[]
    NOT?: ThaiSubDistrictScalarWhereWithAggregatesInput | ThaiSubDistrictScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ThaiSubDistrict"> | number
    name_th?: StringWithAggregatesFilter<"ThaiSubDistrict"> | string
    name_en?: StringWithAggregatesFilter<"ThaiSubDistrict"> | string
    zip_code?: IntWithAggregatesFilter<"ThaiSubDistrict"> | number
    district_id?: IntWithAggregatesFilter<"ThaiSubDistrict"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"ThaiSubDistrict"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"ThaiSubDistrict"> | Date | string | null
    delete_at?: DateTimeNullableWithAggregatesFilter<"ThaiSubDistrict"> | Date | string | null
  }

  export type PersonCreateInput = {
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    province: ThaiProvincesCreateNestedOneWithoutPersonsInput
    district: ThaiDistrictCreateNestedOneWithoutPersonsInput
    subDistrict: ThaiSubDistrictCreateNestedOneWithoutPersonsInput
  }

  export type PersonUncheckedCreateInput = {
    id?: number
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    sub_district_id: number
    district_id: number
    province_id: number
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PersonUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    province?: ThaiProvincesUpdateOneRequiredWithoutPersonsNestedInput
    district?: ThaiDistrictUpdateOneRequiredWithoutPersonsNestedInput
    subDistrict?: ThaiSubDistrictUpdateOneRequiredWithoutPersonsNestedInput
  }

  export type PersonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    sub_district_id?: IntFieldUpdateOperationsInput | number
    district_id?: IntFieldUpdateOperationsInput | number
    province_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonCreateManyInput = {
    id?: number
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    sub_district_id: number
    district_id: number
    province_id: number
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PersonUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    sub_district_id?: IntFieldUpdateOperationsInput | number
    district_id?: IntFieldUpdateOperationsInput | number
    province_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThaiGeographiesCreateInput = {
    id: number
    name: string
    provinces?: ThaiProvincesCreateNestedManyWithoutGeographyInput
  }

  export type ThaiGeographiesUncheckedCreateInput = {
    id: number
    name: string
    provinces?: ThaiProvincesUncheckedCreateNestedManyWithoutGeographyInput
  }

  export type ThaiGeographiesUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    provinces?: ThaiProvincesUpdateManyWithoutGeographyNestedInput
  }

  export type ThaiGeographiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    provinces?: ThaiProvincesUncheckedUpdateManyWithoutGeographyNestedInput
  }

  export type ThaiGeographiesCreateManyInput = {
    id: number
    name: string
  }

  export type ThaiGeographiesUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ThaiGeographiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ThaiProvincesCreateInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    geography: ThaiGeographiesCreateNestedOneWithoutProvincesInput
    districts?: ThaiDistrictCreateNestedManyWithoutProvinceInput
    persons?: PersonCreateNestedManyWithoutProvinceInput
  }

  export type ThaiProvincesUncheckedCreateInput = {
    id: number
    name_th: string
    name_en: string
    geography_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    districts?: ThaiDistrictUncheckedCreateNestedManyWithoutProvinceInput
    persons?: PersonUncheckedCreateNestedManyWithoutProvinceInput
  }

  export type ThaiProvincesUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    geography?: ThaiGeographiesUpdateOneRequiredWithoutProvincesNestedInput
    districts?: ThaiDistrictUpdateManyWithoutProvinceNestedInput
    persons?: PersonUpdateManyWithoutProvinceNestedInput
  }

  export type ThaiProvincesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    geography_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    districts?: ThaiDistrictUncheckedUpdateManyWithoutProvinceNestedInput
    persons?: PersonUncheckedUpdateManyWithoutProvinceNestedInput
  }

  export type ThaiProvincesCreateManyInput = {
    id: number
    name_th: string
    name_en: string
    geography_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type ThaiProvincesUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ThaiProvincesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    geography_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ThaiDistrictCreateInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    province: ThaiProvincesCreateNestedOneWithoutDistrictsInput
    subDistricts?: ThaiSubDistrictCreateNestedManyWithoutDistrictInput
    persons?: PersonCreateNestedManyWithoutDistrictInput
  }

  export type ThaiDistrictUncheckedCreateInput = {
    id: number
    name_th: string
    name_en: string
    province_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    subDistricts?: ThaiSubDistrictUncheckedCreateNestedManyWithoutDistrictInput
    persons?: PersonUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type ThaiDistrictUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    province?: ThaiProvincesUpdateOneRequiredWithoutDistrictsNestedInput
    subDistricts?: ThaiSubDistrictUpdateManyWithoutDistrictNestedInput
    persons?: PersonUpdateManyWithoutDistrictNestedInput
  }

  export type ThaiDistrictUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    province_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subDistricts?: ThaiSubDistrictUncheckedUpdateManyWithoutDistrictNestedInput
    persons?: PersonUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type ThaiDistrictCreateManyInput = {
    id: number
    name_th: string
    name_en: string
    province_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type ThaiDistrictUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ThaiDistrictUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    province_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ThaiSubDistrictCreateInput = {
    id: number
    name_th: string
    name_en: string
    zip_code: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    district: ThaiDistrictCreateNestedOneWithoutSubDistrictsInput
    persons?: PersonCreateNestedManyWithoutSubDistrictInput
  }

  export type ThaiSubDistrictUncheckedCreateInput = {
    id: number
    name_th: string
    name_en: string
    zip_code: number
    district_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    persons?: PersonUncheckedCreateNestedManyWithoutSubDistrictInput
  }

  export type ThaiSubDistrictUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    district?: ThaiDistrictUpdateOneRequiredWithoutSubDistrictsNestedInput
    persons?: PersonUpdateManyWithoutSubDistrictNestedInput
  }

  export type ThaiSubDistrictUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    district_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    persons?: PersonUncheckedUpdateManyWithoutSubDistrictNestedInput
  }

  export type ThaiSubDistrictCreateManyInput = {
    id: number
    name_th: string
    name_en: string
    zip_code: number
    district_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type ThaiSubDistrictUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ThaiSubDistrictUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    district_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ThaiProvincesRelationFilter = {
    is?: ThaiProvincesWhereInput
    isNot?: ThaiProvincesWhereInput
  }

  export type ThaiDistrictRelationFilter = {
    is?: ThaiDistrictWhereInput
    isNot?: ThaiDistrictWhereInput
  }

  export type ThaiSubDistrictRelationFilter = {
    is?: ThaiSubDistrictWhereInput
    isNot?: ThaiSubDistrictWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PersonCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    gender?: SortOrder
    birth_date?: SortOrder
    age?: SortOrder
    address?: SortOrder
    sub_district_id?: SortOrder
    district_id?: SortOrder
    province_id?: SortOrder
    zip_code?: SortOrder
    id_card?: SortOrder
    expire_id_card?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PersonAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    sub_district_id?: SortOrder
    district_id?: SortOrder
    province_id?: SortOrder
  }

  export type PersonMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    gender?: SortOrder
    birth_date?: SortOrder
    age?: SortOrder
    address?: SortOrder
    sub_district_id?: SortOrder
    district_id?: SortOrder
    province_id?: SortOrder
    zip_code?: SortOrder
    id_card?: SortOrder
    expire_id_card?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PersonMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    gender?: SortOrder
    birth_date?: SortOrder
    age?: SortOrder
    address?: SortOrder
    sub_district_id?: SortOrder
    district_id?: SortOrder
    province_id?: SortOrder
    zip_code?: SortOrder
    id_card?: SortOrder
    expire_id_card?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PersonSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    sub_district_id?: SortOrder
    district_id?: SortOrder
    province_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ThaiProvincesListRelationFilter = {
    every?: ThaiProvincesWhereInput
    some?: ThaiProvincesWhereInput
    none?: ThaiProvincesWhereInput
  }

  export type ThaiProvincesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThaiGeographiesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ThaiGeographiesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ThaiGeographiesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ThaiGeographiesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ThaiGeographiesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ThaiGeographiesRelationFilter = {
    is?: ThaiGeographiesWhereInput
    isNot?: ThaiGeographiesWhereInput
  }

  export type ThaiDistrictListRelationFilter = {
    every?: ThaiDistrictWhereInput
    some?: ThaiDistrictWhereInput
    none?: ThaiDistrictWhereInput
  }

  export type PersonListRelationFilter = {
    every?: PersonWhereInput
    some?: PersonWhereInput
    none?: PersonWhereInput
  }

  export type ThaiDistrictOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThaiProvincesCountOrderByAggregateInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    geography_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ThaiProvincesAvgOrderByAggregateInput = {
    id?: SortOrder
    geography_id?: SortOrder
  }

  export type ThaiProvincesMaxOrderByAggregateInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    geography_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ThaiProvincesMinOrderByAggregateInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    geography_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ThaiProvincesSumOrderByAggregateInput = {
    id?: SortOrder
    geography_id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ThaiSubDistrictListRelationFilter = {
    every?: ThaiSubDistrictWhereInput
    some?: ThaiSubDistrictWhereInput
    none?: ThaiSubDistrictWhereInput
  }

  export type ThaiSubDistrictOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThaiDistrictCountOrderByAggregateInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    province_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ThaiDistrictAvgOrderByAggregateInput = {
    id?: SortOrder
    province_id?: SortOrder
  }

  export type ThaiDistrictMaxOrderByAggregateInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    province_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ThaiDistrictMinOrderByAggregateInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    province_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ThaiDistrictSumOrderByAggregateInput = {
    id?: SortOrder
    province_id?: SortOrder
  }

  export type ThaiSubDistrictCountOrderByAggregateInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    zip_code?: SortOrder
    district_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ThaiSubDistrictAvgOrderByAggregateInput = {
    id?: SortOrder
    zip_code?: SortOrder
    district_id?: SortOrder
  }

  export type ThaiSubDistrictMaxOrderByAggregateInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    zip_code?: SortOrder
    district_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ThaiSubDistrictMinOrderByAggregateInput = {
    id?: SortOrder
    name_th?: SortOrder
    name_en?: SortOrder
    zip_code?: SortOrder
    district_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ThaiSubDistrictSumOrderByAggregateInput = {
    id?: SortOrder
    zip_code?: SortOrder
    district_id?: SortOrder
  }

  export type ThaiProvincesCreateNestedOneWithoutPersonsInput = {
    create?: XOR<ThaiProvincesCreateWithoutPersonsInput, ThaiProvincesUncheckedCreateWithoutPersonsInput>
    connectOrCreate?: ThaiProvincesCreateOrConnectWithoutPersonsInput
    connect?: ThaiProvincesWhereUniqueInput
  }

  export type ThaiDistrictCreateNestedOneWithoutPersonsInput = {
    create?: XOR<ThaiDistrictCreateWithoutPersonsInput, ThaiDistrictUncheckedCreateWithoutPersonsInput>
    connectOrCreate?: ThaiDistrictCreateOrConnectWithoutPersonsInput
    connect?: ThaiDistrictWhereUniqueInput
  }

  export type ThaiSubDistrictCreateNestedOneWithoutPersonsInput = {
    create?: XOR<ThaiSubDistrictCreateWithoutPersonsInput, ThaiSubDistrictUncheckedCreateWithoutPersonsInput>
    connectOrCreate?: ThaiSubDistrictCreateOrConnectWithoutPersonsInput
    connect?: ThaiSubDistrictWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ThaiProvincesUpdateOneRequiredWithoutPersonsNestedInput = {
    create?: XOR<ThaiProvincesCreateWithoutPersonsInput, ThaiProvincesUncheckedCreateWithoutPersonsInput>
    connectOrCreate?: ThaiProvincesCreateOrConnectWithoutPersonsInput
    upsert?: ThaiProvincesUpsertWithoutPersonsInput
    connect?: ThaiProvincesWhereUniqueInput
    update?: XOR<XOR<ThaiProvincesUpdateToOneWithWhereWithoutPersonsInput, ThaiProvincesUpdateWithoutPersonsInput>, ThaiProvincesUncheckedUpdateWithoutPersonsInput>
  }

  export type ThaiDistrictUpdateOneRequiredWithoutPersonsNestedInput = {
    create?: XOR<ThaiDistrictCreateWithoutPersonsInput, ThaiDistrictUncheckedCreateWithoutPersonsInput>
    connectOrCreate?: ThaiDistrictCreateOrConnectWithoutPersonsInput
    upsert?: ThaiDistrictUpsertWithoutPersonsInput
    connect?: ThaiDistrictWhereUniqueInput
    update?: XOR<XOR<ThaiDistrictUpdateToOneWithWhereWithoutPersonsInput, ThaiDistrictUpdateWithoutPersonsInput>, ThaiDistrictUncheckedUpdateWithoutPersonsInput>
  }

  export type ThaiSubDistrictUpdateOneRequiredWithoutPersonsNestedInput = {
    create?: XOR<ThaiSubDistrictCreateWithoutPersonsInput, ThaiSubDistrictUncheckedCreateWithoutPersonsInput>
    connectOrCreate?: ThaiSubDistrictCreateOrConnectWithoutPersonsInput
    upsert?: ThaiSubDistrictUpsertWithoutPersonsInput
    connect?: ThaiSubDistrictWhereUniqueInput
    update?: XOR<XOR<ThaiSubDistrictUpdateToOneWithWhereWithoutPersonsInput, ThaiSubDistrictUpdateWithoutPersonsInput>, ThaiSubDistrictUncheckedUpdateWithoutPersonsInput>
  }

  export type ThaiProvincesCreateNestedManyWithoutGeographyInput = {
    create?: XOR<ThaiProvincesCreateWithoutGeographyInput, ThaiProvincesUncheckedCreateWithoutGeographyInput> | ThaiProvincesCreateWithoutGeographyInput[] | ThaiProvincesUncheckedCreateWithoutGeographyInput[]
    connectOrCreate?: ThaiProvincesCreateOrConnectWithoutGeographyInput | ThaiProvincesCreateOrConnectWithoutGeographyInput[]
    createMany?: ThaiProvincesCreateManyGeographyInputEnvelope
    connect?: ThaiProvincesWhereUniqueInput | ThaiProvincesWhereUniqueInput[]
  }

  export type ThaiProvincesUncheckedCreateNestedManyWithoutGeographyInput = {
    create?: XOR<ThaiProvincesCreateWithoutGeographyInput, ThaiProvincesUncheckedCreateWithoutGeographyInput> | ThaiProvincesCreateWithoutGeographyInput[] | ThaiProvincesUncheckedCreateWithoutGeographyInput[]
    connectOrCreate?: ThaiProvincesCreateOrConnectWithoutGeographyInput | ThaiProvincesCreateOrConnectWithoutGeographyInput[]
    createMany?: ThaiProvincesCreateManyGeographyInputEnvelope
    connect?: ThaiProvincesWhereUniqueInput | ThaiProvincesWhereUniqueInput[]
  }

  export type ThaiProvincesUpdateManyWithoutGeographyNestedInput = {
    create?: XOR<ThaiProvincesCreateWithoutGeographyInput, ThaiProvincesUncheckedCreateWithoutGeographyInput> | ThaiProvincesCreateWithoutGeographyInput[] | ThaiProvincesUncheckedCreateWithoutGeographyInput[]
    connectOrCreate?: ThaiProvincesCreateOrConnectWithoutGeographyInput | ThaiProvincesCreateOrConnectWithoutGeographyInput[]
    upsert?: ThaiProvincesUpsertWithWhereUniqueWithoutGeographyInput | ThaiProvincesUpsertWithWhereUniqueWithoutGeographyInput[]
    createMany?: ThaiProvincesCreateManyGeographyInputEnvelope
    set?: ThaiProvincesWhereUniqueInput | ThaiProvincesWhereUniqueInput[]
    disconnect?: ThaiProvincesWhereUniqueInput | ThaiProvincesWhereUniqueInput[]
    delete?: ThaiProvincesWhereUniqueInput | ThaiProvincesWhereUniqueInput[]
    connect?: ThaiProvincesWhereUniqueInput | ThaiProvincesWhereUniqueInput[]
    update?: ThaiProvincesUpdateWithWhereUniqueWithoutGeographyInput | ThaiProvincesUpdateWithWhereUniqueWithoutGeographyInput[]
    updateMany?: ThaiProvincesUpdateManyWithWhereWithoutGeographyInput | ThaiProvincesUpdateManyWithWhereWithoutGeographyInput[]
    deleteMany?: ThaiProvincesScalarWhereInput | ThaiProvincesScalarWhereInput[]
  }

  export type ThaiProvincesUncheckedUpdateManyWithoutGeographyNestedInput = {
    create?: XOR<ThaiProvincesCreateWithoutGeographyInput, ThaiProvincesUncheckedCreateWithoutGeographyInput> | ThaiProvincesCreateWithoutGeographyInput[] | ThaiProvincesUncheckedCreateWithoutGeographyInput[]
    connectOrCreate?: ThaiProvincesCreateOrConnectWithoutGeographyInput | ThaiProvincesCreateOrConnectWithoutGeographyInput[]
    upsert?: ThaiProvincesUpsertWithWhereUniqueWithoutGeographyInput | ThaiProvincesUpsertWithWhereUniqueWithoutGeographyInput[]
    createMany?: ThaiProvincesCreateManyGeographyInputEnvelope
    set?: ThaiProvincesWhereUniqueInput | ThaiProvincesWhereUniqueInput[]
    disconnect?: ThaiProvincesWhereUniqueInput | ThaiProvincesWhereUniqueInput[]
    delete?: ThaiProvincesWhereUniqueInput | ThaiProvincesWhereUniqueInput[]
    connect?: ThaiProvincesWhereUniqueInput | ThaiProvincesWhereUniqueInput[]
    update?: ThaiProvincesUpdateWithWhereUniqueWithoutGeographyInput | ThaiProvincesUpdateWithWhereUniqueWithoutGeographyInput[]
    updateMany?: ThaiProvincesUpdateManyWithWhereWithoutGeographyInput | ThaiProvincesUpdateManyWithWhereWithoutGeographyInput[]
    deleteMany?: ThaiProvincesScalarWhereInput | ThaiProvincesScalarWhereInput[]
  }

  export type ThaiGeographiesCreateNestedOneWithoutProvincesInput = {
    create?: XOR<ThaiGeographiesCreateWithoutProvincesInput, ThaiGeographiesUncheckedCreateWithoutProvincesInput>
    connectOrCreate?: ThaiGeographiesCreateOrConnectWithoutProvincesInput
    connect?: ThaiGeographiesWhereUniqueInput
  }

  export type ThaiDistrictCreateNestedManyWithoutProvinceInput = {
    create?: XOR<ThaiDistrictCreateWithoutProvinceInput, ThaiDistrictUncheckedCreateWithoutProvinceInput> | ThaiDistrictCreateWithoutProvinceInput[] | ThaiDistrictUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: ThaiDistrictCreateOrConnectWithoutProvinceInput | ThaiDistrictCreateOrConnectWithoutProvinceInput[]
    createMany?: ThaiDistrictCreateManyProvinceInputEnvelope
    connect?: ThaiDistrictWhereUniqueInput | ThaiDistrictWhereUniqueInput[]
  }

  export type PersonCreateNestedManyWithoutProvinceInput = {
    create?: XOR<PersonCreateWithoutProvinceInput, PersonUncheckedCreateWithoutProvinceInput> | PersonCreateWithoutProvinceInput[] | PersonUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutProvinceInput | PersonCreateOrConnectWithoutProvinceInput[]
    createMany?: PersonCreateManyProvinceInputEnvelope
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
  }

  export type ThaiDistrictUncheckedCreateNestedManyWithoutProvinceInput = {
    create?: XOR<ThaiDistrictCreateWithoutProvinceInput, ThaiDistrictUncheckedCreateWithoutProvinceInput> | ThaiDistrictCreateWithoutProvinceInput[] | ThaiDistrictUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: ThaiDistrictCreateOrConnectWithoutProvinceInput | ThaiDistrictCreateOrConnectWithoutProvinceInput[]
    createMany?: ThaiDistrictCreateManyProvinceInputEnvelope
    connect?: ThaiDistrictWhereUniqueInput | ThaiDistrictWhereUniqueInput[]
  }

  export type PersonUncheckedCreateNestedManyWithoutProvinceInput = {
    create?: XOR<PersonCreateWithoutProvinceInput, PersonUncheckedCreateWithoutProvinceInput> | PersonCreateWithoutProvinceInput[] | PersonUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutProvinceInput | PersonCreateOrConnectWithoutProvinceInput[]
    createMany?: PersonCreateManyProvinceInputEnvelope
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ThaiGeographiesUpdateOneRequiredWithoutProvincesNestedInput = {
    create?: XOR<ThaiGeographiesCreateWithoutProvincesInput, ThaiGeographiesUncheckedCreateWithoutProvincesInput>
    connectOrCreate?: ThaiGeographiesCreateOrConnectWithoutProvincesInput
    upsert?: ThaiGeographiesUpsertWithoutProvincesInput
    connect?: ThaiGeographiesWhereUniqueInput
    update?: XOR<XOR<ThaiGeographiesUpdateToOneWithWhereWithoutProvincesInput, ThaiGeographiesUpdateWithoutProvincesInput>, ThaiGeographiesUncheckedUpdateWithoutProvincesInput>
  }

  export type ThaiDistrictUpdateManyWithoutProvinceNestedInput = {
    create?: XOR<ThaiDistrictCreateWithoutProvinceInput, ThaiDistrictUncheckedCreateWithoutProvinceInput> | ThaiDistrictCreateWithoutProvinceInput[] | ThaiDistrictUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: ThaiDistrictCreateOrConnectWithoutProvinceInput | ThaiDistrictCreateOrConnectWithoutProvinceInput[]
    upsert?: ThaiDistrictUpsertWithWhereUniqueWithoutProvinceInput | ThaiDistrictUpsertWithWhereUniqueWithoutProvinceInput[]
    createMany?: ThaiDistrictCreateManyProvinceInputEnvelope
    set?: ThaiDistrictWhereUniqueInput | ThaiDistrictWhereUniqueInput[]
    disconnect?: ThaiDistrictWhereUniqueInput | ThaiDistrictWhereUniqueInput[]
    delete?: ThaiDistrictWhereUniqueInput | ThaiDistrictWhereUniqueInput[]
    connect?: ThaiDistrictWhereUniqueInput | ThaiDistrictWhereUniqueInput[]
    update?: ThaiDistrictUpdateWithWhereUniqueWithoutProvinceInput | ThaiDistrictUpdateWithWhereUniqueWithoutProvinceInput[]
    updateMany?: ThaiDistrictUpdateManyWithWhereWithoutProvinceInput | ThaiDistrictUpdateManyWithWhereWithoutProvinceInput[]
    deleteMany?: ThaiDistrictScalarWhereInput | ThaiDistrictScalarWhereInput[]
  }

  export type PersonUpdateManyWithoutProvinceNestedInput = {
    create?: XOR<PersonCreateWithoutProvinceInput, PersonUncheckedCreateWithoutProvinceInput> | PersonCreateWithoutProvinceInput[] | PersonUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutProvinceInput | PersonCreateOrConnectWithoutProvinceInput[]
    upsert?: PersonUpsertWithWhereUniqueWithoutProvinceInput | PersonUpsertWithWhereUniqueWithoutProvinceInput[]
    createMany?: PersonCreateManyProvinceInputEnvelope
    set?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    disconnect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    delete?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    update?: PersonUpdateWithWhereUniqueWithoutProvinceInput | PersonUpdateWithWhereUniqueWithoutProvinceInput[]
    updateMany?: PersonUpdateManyWithWhereWithoutProvinceInput | PersonUpdateManyWithWhereWithoutProvinceInput[]
    deleteMany?: PersonScalarWhereInput | PersonScalarWhereInput[]
  }

  export type ThaiDistrictUncheckedUpdateManyWithoutProvinceNestedInput = {
    create?: XOR<ThaiDistrictCreateWithoutProvinceInput, ThaiDistrictUncheckedCreateWithoutProvinceInput> | ThaiDistrictCreateWithoutProvinceInput[] | ThaiDistrictUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: ThaiDistrictCreateOrConnectWithoutProvinceInput | ThaiDistrictCreateOrConnectWithoutProvinceInput[]
    upsert?: ThaiDistrictUpsertWithWhereUniqueWithoutProvinceInput | ThaiDistrictUpsertWithWhereUniqueWithoutProvinceInput[]
    createMany?: ThaiDistrictCreateManyProvinceInputEnvelope
    set?: ThaiDistrictWhereUniqueInput | ThaiDistrictWhereUniqueInput[]
    disconnect?: ThaiDistrictWhereUniqueInput | ThaiDistrictWhereUniqueInput[]
    delete?: ThaiDistrictWhereUniqueInput | ThaiDistrictWhereUniqueInput[]
    connect?: ThaiDistrictWhereUniqueInput | ThaiDistrictWhereUniqueInput[]
    update?: ThaiDistrictUpdateWithWhereUniqueWithoutProvinceInput | ThaiDistrictUpdateWithWhereUniqueWithoutProvinceInput[]
    updateMany?: ThaiDistrictUpdateManyWithWhereWithoutProvinceInput | ThaiDistrictUpdateManyWithWhereWithoutProvinceInput[]
    deleteMany?: ThaiDistrictScalarWhereInput | ThaiDistrictScalarWhereInput[]
  }

  export type PersonUncheckedUpdateManyWithoutProvinceNestedInput = {
    create?: XOR<PersonCreateWithoutProvinceInput, PersonUncheckedCreateWithoutProvinceInput> | PersonCreateWithoutProvinceInput[] | PersonUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutProvinceInput | PersonCreateOrConnectWithoutProvinceInput[]
    upsert?: PersonUpsertWithWhereUniqueWithoutProvinceInput | PersonUpsertWithWhereUniqueWithoutProvinceInput[]
    createMany?: PersonCreateManyProvinceInputEnvelope
    set?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    disconnect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    delete?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    update?: PersonUpdateWithWhereUniqueWithoutProvinceInput | PersonUpdateWithWhereUniqueWithoutProvinceInput[]
    updateMany?: PersonUpdateManyWithWhereWithoutProvinceInput | PersonUpdateManyWithWhereWithoutProvinceInput[]
    deleteMany?: PersonScalarWhereInput | PersonScalarWhereInput[]
  }

  export type ThaiProvincesCreateNestedOneWithoutDistrictsInput = {
    create?: XOR<ThaiProvincesCreateWithoutDistrictsInput, ThaiProvincesUncheckedCreateWithoutDistrictsInput>
    connectOrCreate?: ThaiProvincesCreateOrConnectWithoutDistrictsInput
    connect?: ThaiProvincesWhereUniqueInput
  }

  export type ThaiSubDistrictCreateNestedManyWithoutDistrictInput = {
    create?: XOR<ThaiSubDistrictCreateWithoutDistrictInput, ThaiSubDistrictUncheckedCreateWithoutDistrictInput> | ThaiSubDistrictCreateWithoutDistrictInput[] | ThaiSubDistrictUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ThaiSubDistrictCreateOrConnectWithoutDistrictInput | ThaiSubDistrictCreateOrConnectWithoutDistrictInput[]
    createMany?: ThaiSubDistrictCreateManyDistrictInputEnvelope
    connect?: ThaiSubDistrictWhereUniqueInput | ThaiSubDistrictWhereUniqueInput[]
  }

  export type PersonCreateNestedManyWithoutDistrictInput = {
    create?: XOR<PersonCreateWithoutDistrictInput, PersonUncheckedCreateWithoutDistrictInput> | PersonCreateWithoutDistrictInput[] | PersonUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutDistrictInput | PersonCreateOrConnectWithoutDistrictInput[]
    createMany?: PersonCreateManyDistrictInputEnvelope
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
  }

  export type ThaiSubDistrictUncheckedCreateNestedManyWithoutDistrictInput = {
    create?: XOR<ThaiSubDistrictCreateWithoutDistrictInput, ThaiSubDistrictUncheckedCreateWithoutDistrictInput> | ThaiSubDistrictCreateWithoutDistrictInput[] | ThaiSubDistrictUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ThaiSubDistrictCreateOrConnectWithoutDistrictInput | ThaiSubDistrictCreateOrConnectWithoutDistrictInput[]
    createMany?: ThaiSubDistrictCreateManyDistrictInputEnvelope
    connect?: ThaiSubDistrictWhereUniqueInput | ThaiSubDistrictWhereUniqueInput[]
  }

  export type PersonUncheckedCreateNestedManyWithoutDistrictInput = {
    create?: XOR<PersonCreateWithoutDistrictInput, PersonUncheckedCreateWithoutDistrictInput> | PersonCreateWithoutDistrictInput[] | PersonUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutDistrictInput | PersonCreateOrConnectWithoutDistrictInput[]
    createMany?: PersonCreateManyDistrictInputEnvelope
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
  }

  export type ThaiProvincesUpdateOneRequiredWithoutDistrictsNestedInput = {
    create?: XOR<ThaiProvincesCreateWithoutDistrictsInput, ThaiProvincesUncheckedCreateWithoutDistrictsInput>
    connectOrCreate?: ThaiProvincesCreateOrConnectWithoutDistrictsInput
    upsert?: ThaiProvincesUpsertWithoutDistrictsInput
    connect?: ThaiProvincesWhereUniqueInput
    update?: XOR<XOR<ThaiProvincesUpdateToOneWithWhereWithoutDistrictsInput, ThaiProvincesUpdateWithoutDistrictsInput>, ThaiProvincesUncheckedUpdateWithoutDistrictsInput>
  }

  export type ThaiSubDistrictUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<ThaiSubDistrictCreateWithoutDistrictInput, ThaiSubDistrictUncheckedCreateWithoutDistrictInput> | ThaiSubDistrictCreateWithoutDistrictInput[] | ThaiSubDistrictUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ThaiSubDistrictCreateOrConnectWithoutDistrictInput | ThaiSubDistrictCreateOrConnectWithoutDistrictInput[]
    upsert?: ThaiSubDistrictUpsertWithWhereUniqueWithoutDistrictInput | ThaiSubDistrictUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: ThaiSubDistrictCreateManyDistrictInputEnvelope
    set?: ThaiSubDistrictWhereUniqueInput | ThaiSubDistrictWhereUniqueInput[]
    disconnect?: ThaiSubDistrictWhereUniqueInput | ThaiSubDistrictWhereUniqueInput[]
    delete?: ThaiSubDistrictWhereUniqueInput | ThaiSubDistrictWhereUniqueInput[]
    connect?: ThaiSubDistrictWhereUniqueInput | ThaiSubDistrictWhereUniqueInput[]
    update?: ThaiSubDistrictUpdateWithWhereUniqueWithoutDistrictInput | ThaiSubDistrictUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: ThaiSubDistrictUpdateManyWithWhereWithoutDistrictInput | ThaiSubDistrictUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: ThaiSubDistrictScalarWhereInput | ThaiSubDistrictScalarWhereInput[]
  }

  export type PersonUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<PersonCreateWithoutDistrictInput, PersonUncheckedCreateWithoutDistrictInput> | PersonCreateWithoutDistrictInput[] | PersonUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutDistrictInput | PersonCreateOrConnectWithoutDistrictInput[]
    upsert?: PersonUpsertWithWhereUniqueWithoutDistrictInput | PersonUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: PersonCreateManyDistrictInputEnvelope
    set?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    disconnect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    delete?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    update?: PersonUpdateWithWhereUniqueWithoutDistrictInput | PersonUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: PersonUpdateManyWithWhereWithoutDistrictInput | PersonUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: PersonScalarWhereInput | PersonScalarWhereInput[]
  }

  export type ThaiSubDistrictUncheckedUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<ThaiSubDistrictCreateWithoutDistrictInput, ThaiSubDistrictUncheckedCreateWithoutDistrictInput> | ThaiSubDistrictCreateWithoutDistrictInput[] | ThaiSubDistrictUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ThaiSubDistrictCreateOrConnectWithoutDistrictInput | ThaiSubDistrictCreateOrConnectWithoutDistrictInput[]
    upsert?: ThaiSubDistrictUpsertWithWhereUniqueWithoutDistrictInput | ThaiSubDistrictUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: ThaiSubDistrictCreateManyDistrictInputEnvelope
    set?: ThaiSubDistrictWhereUniqueInput | ThaiSubDistrictWhereUniqueInput[]
    disconnect?: ThaiSubDistrictWhereUniqueInput | ThaiSubDistrictWhereUniqueInput[]
    delete?: ThaiSubDistrictWhereUniqueInput | ThaiSubDistrictWhereUniqueInput[]
    connect?: ThaiSubDistrictWhereUniqueInput | ThaiSubDistrictWhereUniqueInput[]
    update?: ThaiSubDistrictUpdateWithWhereUniqueWithoutDistrictInput | ThaiSubDistrictUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: ThaiSubDistrictUpdateManyWithWhereWithoutDistrictInput | ThaiSubDistrictUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: ThaiSubDistrictScalarWhereInput | ThaiSubDistrictScalarWhereInput[]
  }

  export type PersonUncheckedUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<PersonCreateWithoutDistrictInput, PersonUncheckedCreateWithoutDistrictInput> | PersonCreateWithoutDistrictInput[] | PersonUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutDistrictInput | PersonCreateOrConnectWithoutDistrictInput[]
    upsert?: PersonUpsertWithWhereUniqueWithoutDistrictInput | PersonUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: PersonCreateManyDistrictInputEnvelope
    set?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    disconnect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    delete?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    update?: PersonUpdateWithWhereUniqueWithoutDistrictInput | PersonUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: PersonUpdateManyWithWhereWithoutDistrictInput | PersonUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: PersonScalarWhereInput | PersonScalarWhereInput[]
  }

  export type ThaiDistrictCreateNestedOneWithoutSubDistrictsInput = {
    create?: XOR<ThaiDistrictCreateWithoutSubDistrictsInput, ThaiDistrictUncheckedCreateWithoutSubDistrictsInput>
    connectOrCreate?: ThaiDistrictCreateOrConnectWithoutSubDistrictsInput
    connect?: ThaiDistrictWhereUniqueInput
  }

  export type PersonCreateNestedManyWithoutSubDistrictInput = {
    create?: XOR<PersonCreateWithoutSubDistrictInput, PersonUncheckedCreateWithoutSubDistrictInput> | PersonCreateWithoutSubDistrictInput[] | PersonUncheckedCreateWithoutSubDistrictInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutSubDistrictInput | PersonCreateOrConnectWithoutSubDistrictInput[]
    createMany?: PersonCreateManySubDistrictInputEnvelope
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
  }

  export type PersonUncheckedCreateNestedManyWithoutSubDistrictInput = {
    create?: XOR<PersonCreateWithoutSubDistrictInput, PersonUncheckedCreateWithoutSubDistrictInput> | PersonCreateWithoutSubDistrictInput[] | PersonUncheckedCreateWithoutSubDistrictInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutSubDistrictInput | PersonCreateOrConnectWithoutSubDistrictInput[]
    createMany?: PersonCreateManySubDistrictInputEnvelope
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
  }

  export type ThaiDistrictUpdateOneRequiredWithoutSubDistrictsNestedInput = {
    create?: XOR<ThaiDistrictCreateWithoutSubDistrictsInput, ThaiDistrictUncheckedCreateWithoutSubDistrictsInput>
    connectOrCreate?: ThaiDistrictCreateOrConnectWithoutSubDistrictsInput
    upsert?: ThaiDistrictUpsertWithoutSubDistrictsInput
    connect?: ThaiDistrictWhereUniqueInput
    update?: XOR<XOR<ThaiDistrictUpdateToOneWithWhereWithoutSubDistrictsInput, ThaiDistrictUpdateWithoutSubDistrictsInput>, ThaiDistrictUncheckedUpdateWithoutSubDistrictsInput>
  }

  export type PersonUpdateManyWithoutSubDistrictNestedInput = {
    create?: XOR<PersonCreateWithoutSubDistrictInput, PersonUncheckedCreateWithoutSubDistrictInput> | PersonCreateWithoutSubDistrictInput[] | PersonUncheckedCreateWithoutSubDistrictInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutSubDistrictInput | PersonCreateOrConnectWithoutSubDistrictInput[]
    upsert?: PersonUpsertWithWhereUniqueWithoutSubDistrictInput | PersonUpsertWithWhereUniqueWithoutSubDistrictInput[]
    createMany?: PersonCreateManySubDistrictInputEnvelope
    set?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    disconnect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    delete?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    update?: PersonUpdateWithWhereUniqueWithoutSubDistrictInput | PersonUpdateWithWhereUniqueWithoutSubDistrictInput[]
    updateMany?: PersonUpdateManyWithWhereWithoutSubDistrictInput | PersonUpdateManyWithWhereWithoutSubDistrictInput[]
    deleteMany?: PersonScalarWhereInput | PersonScalarWhereInput[]
  }

  export type PersonUncheckedUpdateManyWithoutSubDistrictNestedInput = {
    create?: XOR<PersonCreateWithoutSubDistrictInput, PersonUncheckedCreateWithoutSubDistrictInput> | PersonCreateWithoutSubDistrictInput[] | PersonUncheckedCreateWithoutSubDistrictInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutSubDistrictInput | PersonCreateOrConnectWithoutSubDistrictInput[]
    upsert?: PersonUpsertWithWhereUniqueWithoutSubDistrictInput | PersonUpsertWithWhereUniqueWithoutSubDistrictInput[]
    createMany?: PersonCreateManySubDistrictInputEnvelope
    set?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    disconnect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    delete?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    update?: PersonUpdateWithWhereUniqueWithoutSubDistrictInput | PersonUpdateWithWhereUniqueWithoutSubDistrictInput[]
    updateMany?: PersonUpdateManyWithWhereWithoutSubDistrictInput | PersonUpdateManyWithWhereWithoutSubDistrictInput[]
    deleteMany?: PersonScalarWhereInput | PersonScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ThaiProvincesCreateWithoutPersonsInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    geography: ThaiGeographiesCreateNestedOneWithoutProvincesInput
    districts?: ThaiDistrictCreateNestedManyWithoutProvinceInput
  }

  export type ThaiProvincesUncheckedCreateWithoutPersonsInput = {
    id: number
    name_th: string
    name_en: string
    geography_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    districts?: ThaiDistrictUncheckedCreateNestedManyWithoutProvinceInput
  }

  export type ThaiProvincesCreateOrConnectWithoutPersonsInput = {
    where: ThaiProvincesWhereUniqueInput
    create: XOR<ThaiProvincesCreateWithoutPersonsInput, ThaiProvincesUncheckedCreateWithoutPersonsInput>
  }

  export type ThaiDistrictCreateWithoutPersonsInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    province: ThaiProvincesCreateNestedOneWithoutDistrictsInput
    subDistricts?: ThaiSubDistrictCreateNestedManyWithoutDistrictInput
  }

  export type ThaiDistrictUncheckedCreateWithoutPersonsInput = {
    id: number
    name_th: string
    name_en: string
    province_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    subDistricts?: ThaiSubDistrictUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type ThaiDistrictCreateOrConnectWithoutPersonsInput = {
    where: ThaiDistrictWhereUniqueInput
    create: XOR<ThaiDistrictCreateWithoutPersonsInput, ThaiDistrictUncheckedCreateWithoutPersonsInput>
  }

  export type ThaiSubDistrictCreateWithoutPersonsInput = {
    id: number
    name_th: string
    name_en: string
    zip_code: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    district: ThaiDistrictCreateNestedOneWithoutSubDistrictsInput
  }

  export type ThaiSubDistrictUncheckedCreateWithoutPersonsInput = {
    id: number
    name_th: string
    name_en: string
    zip_code: number
    district_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type ThaiSubDistrictCreateOrConnectWithoutPersonsInput = {
    where: ThaiSubDistrictWhereUniqueInput
    create: XOR<ThaiSubDistrictCreateWithoutPersonsInput, ThaiSubDistrictUncheckedCreateWithoutPersonsInput>
  }

  export type ThaiProvincesUpsertWithoutPersonsInput = {
    update: XOR<ThaiProvincesUpdateWithoutPersonsInput, ThaiProvincesUncheckedUpdateWithoutPersonsInput>
    create: XOR<ThaiProvincesCreateWithoutPersonsInput, ThaiProvincesUncheckedCreateWithoutPersonsInput>
    where?: ThaiProvincesWhereInput
  }

  export type ThaiProvincesUpdateToOneWithWhereWithoutPersonsInput = {
    where?: ThaiProvincesWhereInput
    data: XOR<ThaiProvincesUpdateWithoutPersonsInput, ThaiProvincesUncheckedUpdateWithoutPersonsInput>
  }

  export type ThaiProvincesUpdateWithoutPersonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    geography?: ThaiGeographiesUpdateOneRequiredWithoutProvincesNestedInput
    districts?: ThaiDistrictUpdateManyWithoutProvinceNestedInput
  }

  export type ThaiProvincesUncheckedUpdateWithoutPersonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    geography_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    districts?: ThaiDistrictUncheckedUpdateManyWithoutProvinceNestedInput
  }

  export type ThaiDistrictUpsertWithoutPersonsInput = {
    update: XOR<ThaiDistrictUpdateWithoutPersonsInput, ThaiDistrictUncheckedUpdateWithoutPersonsInput>
    create: XOR<ThaiDistrictCreateWithoutPersonsInput, ThaiDistrictUncheckedCreateWithoutPersonsInput>
    where?: ThaiDistrictWhereInput
  }

  export type ThaiDistrictUpdateToOneWithWhereWithoutPersonsInput = {
    where?: ThaiDistrictWhereInput
    data: XOR<ThaiDistrictUpdateWithoutPersonsInput, ThaiDistrictUncheckedUpdateWithoutPersonsInput>
  }

  export type ThaiDistrictUpdateWithoutPersonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    province?: ThaiProvincesUpdateOneRequiredWithoutDistrictsNestedInput
    subDistricts?: ThaiSubDistrictUpdateManyWithoutDistrictNestedInput
  }

  export type ThaiDistrictUncheckedUpdateWithoutPersonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    province_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subDistricts?: ThaiSubDistrictUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type ThaiSubDistrictUpsertWithoutPersonsInput = {
    update: XOR<ThaiSubDistrictUpdateWithoutPersonsInput, ThaiSubDistrictUncheckedUpdateWithoutPersonsInput>
    create: XOR<ThaiSubDistrictCreateWithoutPersonsInput, ThaiSubDistrictUncheckedCreateWithoutPersonsInput>
    where?: ThaiSubDistrictWhereInput
  }

  export type ThaiSubDistrictUpdateToOneWithWhereWithoutPersonsInput = {
    where?: ThaiSubDistrictWhereInput
    data: XOR<ThaiSubDistrictUpdateWithoutPersonsInput, ThaiSubDistrictUncheckedUpdateWithoutPersonsInput>
  }

  export type ThaiSubDistrictUpdateWithoutPersonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    district?: ThaiDistrictUpdateOneRequiredWithoutSubDistrictsNestedInput
  }

  export type ThaiSubDistrictUncheckedUpdateWithoutPersonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    district_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ThaiProvincesCreateWithoutGeographyInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    districts?: ThaiDistrictCreateNestedManyWithoutProvinceInput
    persons?: PersonCreateNestedManyWithoutProvinceInput
  }

  export type ThaiProvincesUncheckedCreateWithoutGeographyInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    districts?: ThaiDistrictUncheckedCreateNestedManyWithoutProvinceInput
    persons?: PersonUncheckedCreateNestedManyWithoutProvinceInput
  }

  export type ThaiProvincesCreateOrConnectWithoutGeographyInput = {
    where: ThaiProvincesWhereUniqueInput
    create: XOR<ThaiProvincesCreateWithoutGeographyInput, ThaiProvincesUncheckedCreateWithoutGeographyInput>
  }

  export type ThaiProvincesCreateManyGeographyInputEnvelope = {
    data: ThaiProvincesCreateManyGeographyInput | ThaiProvincesCreateManyGeographyInput[]
    skipDuplicates?: boolean
  }

  export type ThaiProvincesUpsertWithWhereUniqueWithoutGeographyInput = {
    where: ThaiProvincesWhereUniqueInput
    update: XOR<ThaiProvincesUpdateWithoutGeographyInput, ThaiProvincesUncheckedUpdateWithoutGeographyInput>
    create: XOR<ThaiProvincesCreateWithoutGeographyInput, ThaiProvincesUncheckedCreateWithoutGeographyInput>
  }

  export type ThaiProvincesUpdateWithWhereUniqueWithoutGeographyInput = {
    where: ThaiProvincesWhereUniqueInput
    data: XOR<ThaiProvincesUpdateWithoutGeographyInput, ThaiProvincesUncheckedUpdateWithoutGeographyInput>
  }

  export type ThaiProvincesUpdateManyWithWhereWithoutGeographyInput = {
    where: ThaiProvincesScalarWhereInput
    data: XOR<ThaiProvincesUpdateManyMutationInput, ThaiProvincesUncheckedUpdateManyWithoutGeographyInput>
  }

  export type ThaiProvincesScalarWhereInput = {
    AND?: ThaiProvincesScalarWhereInput | ThaiProvincesScalarWhereInput[]
    OR?: ThaiProvincesScalarWhereInput[]
    NOT?: ThaiProvincesScalarWhereInput | ThaiProvincesScalarWhereInput[]
    id?: IntFilter<"ThaiProvinces"> | number
    name_th?: StringFilter<"ThaiProvinces"> | string
    name_en?: StringFilter<"ThaiProvinces"> | string
    geography_id?: IntFilter<"ThaiProvinces"> | number
    created_at?: DateTimeNullableFilter<"ThaiProvinces"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ThaiProvinces"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ThaiProvinces"> | Date | string | null
  }

  export type ThaiGeographiesCreateWithoutProvincesInput = {
    id: number
    name: string
  }

  export type ThaiGeographiesUncheckedCreateWithoutProvincesInput = {
    id: number
    name: string
  }

  export type ThaiGeographiesCreateOrConnectWithoutProvincesInput = {
    where: ThaiGeographiesWhereUniqueInput
    create: XOR<ThaiGeographiesCreateWithoutProvincesInput, ThaiGeographiesUncheckedCreateWithoutProvincesInput>
  }

  export type ThaiDistrictCreateWithoutProvinceInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    subDistricts?: ThaiSubDistrictCreateNestedManyWithoutDistrictInput
    persons?: PersonCreateNestedManyWithoutDistrictInput
  }

  export type ThaiDistrictUncheckedCreateWithoutProvinceInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    subDistricts?: ThaiSubDistrictUncheckedCreateNestedManyWithoutDistrictInput
    persons?: PersonUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type ThaiDistrictCreateOrConnectWithoutProvinceInput = {
    where: ThaiDistrictWhereUniqueInput
    create: XOR<ThaiDistrictCreateWithoutProvinceInput, ThaiDistrictUncheckedCreateWithoutProvinceInput>
  }

  export type ThaiDistrictCreateManyProvinceInputEnvelope = {
    data: ThaiDistrictCreateManyProvinceInput | ThaiDistrictCreateManyProvinceInput[]
    skipDuplicates?: boolean
  }

  export type PersonCreateWithoutProvinceInput = {
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    district: ThaiDistrictCreateNestedOneWithoutPersonsInput
    subDistrict: ThaiSubDistrictCreateNestedOneWithoutPersonsInput
  }

  export type PersonUncheckedCreateWithoutProvinceInput = {
    id?: number
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    sub_district_id: number
    district_id: number
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PersonCreateOrConnectWithoutProvinceInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutProvinceInput, PersonUncheckedCreateWithoutProvinceInput>
  }

  export type PersonCreateManyProvinceInputEnvelope = {
    data: PersonCreateManyProvinceInput | PersonCreateManyProvinceInput[]
    skipDuplicates?: boolean
  }

  export type ThaiGeographiesUpsertWithoutProvincesInput = {
    update: XOR<ThaiGeographiesUpdateWithoutProvincesInput, ThaiGeographiesUncheckedUpdateWithoutProvincesInput>
    create: XOR<ThaiGeographiesCreateWithoutProvincesInput, ThaiGeographiesUncheckedCreateWithoutProvincesInput>
    where?: ThaiGeographiesWhereInput
  }

  export type ThaiGeographiesUpdateToOneWithWhereWithoutProvincesInput = {
    where?: ThaiGeographiesWhereInput
    data: XOR<ThaiGeographiesUpdateWithoutProvincesInput, ThaiGeographiesUncheckedUpdateWithoutProvincesInput>
  }

  export type ThaiGeographiesUpdateWithoutProvincesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ThaiGeographiesUncheckedUpdateWithoutProvincesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ThaiDistrictUpsertWithWhereUniqueWithoutProvinceInput = {
    where: ThaiDistrictWhereUniqueInput
    update: XOR<ThaiDistrictUpdateWithoutProvinceInput, ThaiDistrictUncheckedUpdateWithoutProvinceInput>
    create: XOR<ThaiDistrictCreateWithoutProvinceInput, ThaiDistrictUncheckedCreateWithoutProvinceInput>
  }

  export type ThaiDistrictUpdateWithWhereUniqueWithoutProvinceInput = {
    where: ThaiDistrictWhereUniqueInput
    data: XOR<ThaiDistrictUpdateWithoutProvinceInput, ThaiDistrictUncheckedUpdateWithoutProvinceInput>
  }

  export type ThaiDistrictUpdateManyWithWhereWithoutProvinceInput = {
    where: ThaiDistrictScalarWhereInput
    data: XOR<ThaiDistrictUpdateManyMutationInput, ThaiDistrictUncheckedUpdateManyWithoutProvinceInput>
  }

  export type ThaiDistrictScalarWhereInput = {
    AND?: ThaiDistrictScalarWhereInput | ThaiDistrictScalarWhereInput[]
    OR?: ThaiDistrictScalarWhereInput[]
    NOT?: ThaiDistrictScalarWhereInput | ThaiDistrictScalarWhereInput[]
    id?: IntFilter<"ThaiDistrict"> | number
    name_th?: StringFilter<"ThaiDistrict"> | string
    name_en?: StringFilter<"ThaiDistrict"> | string
    province_id?: IntFilter<"ThaiDistrict"> | number
    created_at?: DateTimeNullableFilter<"ThaiDistrict"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ThaiDistrict"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ThaiDistrict"> | Date | string | null
  }

  export type PersonUpsertWithWhereUniqueWithoutProvinceInput = {
    where: PersonWhereUniqueInput
    update: XOR<PersonUpdateWithoutProvinceInput, PersonUncheckedUpdateWithoutProvinceInput>
    create: XOR<PersonCreateWithoutProvinceInput, PersonUncheckedCreateWithoutProvinceInput>
  }

  export type PersonUpdateWithWhereUniqueWithoutProvinceInput = {
    where: PersonWhereUniqueInput
    data: XOR<PersonUpdateWithoutProvinceInput, PersonUncheckedUpdateWithoutProvinceInput>
  }

  export type PersonUpdateManyWithWhereWithoutProvinceInput = {
    where: PersonScalarWhereInput
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyWithoutProvinceInput>
  }

  export type PersonScalarWhereInput = {
    AND?: PersonScalarWhereInput | PersonScalarWhereInput[]
    OR?: PersonScalarWhereInput[]
    NOT?: PersonScalarWhereInput | PersonScalarWhereInput[]
    id?: IntFilter<"Person"> | number
    first_name?: StringFilter<"Person"> | string
    middle_name?: StringNullableFilter<"Person"> | string | null
    last_name?: StringFilter<"Person"> | string
    gender?: StringFilter<"Person"> | string
    birth_date?: DateTimeFilter<"Person"> | Date | string
    age?: IntFilter<"Person"> | number
    address?: StringFilter<"Person"> | string
    sub_district_id?: IntFilter<"Person"> | number
    district_id?: IntFilter<"Person"> | number
    province_id?: IntFilter<"Person"> | number
    zip_code?: StringFilter<"Person"> | string
    id_card?: StringFilter<"Person"> | string
    expire_id_card?: DateTimeFilter<"Person"> | Date | string
    created_at?: DateTimeFilter<"Person"> | Date | string
    updated_at?: DateTimeFilter<"Person"> | Date | string
  }

  export type ThaiProvincesCreateWithoutDistrictsInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    geography: ThaiGeographiesCreateNestedOneWithoutProvincesInput
    persons?: PersonCreateNestedManyWithoutProvinceInput
  }

  export type ThaiProvincesUncheckedCreateWithoutDistrictsInput = {
    id: number
    name_th: string
    name_en: string
    geography_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    persons?: PersonUncheckedCreateNestedManyWithoutProvinceInput
  }

  export type ThaiProvincesCreateOrConnectWithoutDistrictsInput = {
    where: ThaiProvincesWhereUniqueInput
    create: XOR<ThaiProvincesCreateWithoutDistrictsInput, ThaiProvincesUncheckedCreateWithoutDistrictsInput>
  }

  export type ThaiSubDistrictCreateWithoutDistrictInput = {
    id: number
    name_th: string
    name_en: string
    zip_code: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    persons?: PersonCreateNestedManyWithoutSubDistrictInput
  }

  export type ThaiSubDistrictUncheckedCreateWithoutDistrictInput = {
    id: number
    name_th: string
    name_en: string
    zip_code: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    persons?: PersonUncheckedCreateNestedManyWithoutSubDistrictInput
  }

  export type ThaiSubDistrictCreateOrConnectWithoutDistrictInput = {
    where: ThaiSubDistrictWhereUniqueInput
    create: XOR<ThaiSubDistrictCreateWithoutDistrictInput, ThaiSubDistrictUncheckedCreateWithoutDistrictInput>
  }

  export type ThaiSubDistrictCreateManyDistrictInputEnvelope = {
    data: ThaiSubDistrictCreateManyDistrictInput | ThaiSubDistrictCreateManyDistrictInput[]
    skipDuplicates?: boolean
  }

  export type PersonCreateWithoutDistrictInput = {
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    province: ThaiProvincesCreateNestedOneWithoutPersonsInput
    subDistrict: ThaiSubDistrictCreateNestedOneWithoutPersonsInput
  }

  export type PersonUncheckedCreateWithoutDistrictInput = {
    id?: number
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    sub_district_id: number
    province_id: number
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PersonCreateOrConnectWithoutDistrictInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutDistrictInput, PersonUncheckedCreateWithoutDistrictInput>
  }

  export type PersonCreateManyDistrictInputEnvelope = {
    data: PersonCreateManyDistrictInput | PersonCreateManyDistrictInput[]
    skipDuplicates?: boolean
  }

  export type ThaiProvincesUpsertWithoutDistrictsInput = {
    update: XOR<ThaiProvincesUpdateWithoutDistrictsInput, ThaiProvincesUncheckedUpdateWithoutDistrictsInput>
    create: XOR<ThaiProvincesCreateWithoutDistrictsInput, ThaiProvincesUncheckedCreateWithoutDistrictsInput>
    where?: ThaiProvincesWhereInput
  }

  export type ThaiProvincesUpdateToOneWithWhereWithoutDistrictsInput = {
    where?: ThaiProvincesWhereInput
    data: XOR<ThaiProvincesUpdateWithoutDistrictsInput, ThaiProvincesUncheckedUpdateWithoutDistrictsInput>
  }

  export type ThaiProvincesUpdateWithoutDistrictsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    geography?: ThaiGeographiesUpdateOneRequiredWithoutProvincesNestedInput
    persons?: PersonUpdateManyWithoutProvinceNestedInput
  }

  export type ThaiProvincesUncheckedUpdateWithoutDistrictsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    geography_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    persons?: PersonUncheckedUpdateManyWithoutProvinceNestedInput
  }

  export type ThaiSubDistrictUpsertWithWhereUniqueWithoutDistrictInput = {
    where: ThaiSubDistrictWhereUniqueInput
    update: XOR<ThaiSubDistrictUpdateWithoutDistrictInput, ThaiSubDistrictUncheckedUpdateWithoutDistrictInput>
    create: XOR<ThaiSubDistrictCreateWithoutDistrictInput, ThaiSubDistrictUncheckedCreateWithoutDistrictInput>
  }

  export type ThaiSubDistrictUpdateWithWhereUniqueWithoutDistrictInput = {
    where: ThaiSubDistrictWhereUniqueInput
    data: XOR<ThaiSubDistrictUpdateWithoutDistrictInput, ThaiSubDistrictUncheckedUpdateWithoutDistrictInput>
  }

  export type ThaiSubDistrictUpdateManyWithWhereWithoutDistrictInput = {
    where: ThaiSubDistrictScalarWhereInput
    data: XOR<ThaiSubDistrictUpdateManyMutationInput, ThaiSubDistrictUncheckedUpdateManyWithoutDistrictInput>
  }

  export type ThaiSubDistrictScalarWhereInput = {
    AND?: ThaiSubDistrictScalarWhereInput | ThaiSubDistrictScalarWhereInput[]
    OR?: ThaiSubDistrictScalarWhereInput[]
    NOT?: ThaiSubDistrictScalarWhereInput | ThaiSubDistrictScalarWhereInput[]
    id?: IntFilter<"ThaiSubDistrict"> | number
    name_th?: StringFilter<"ThaiSubDistrict"> | string
    name_en?: StringFilter<"ThaiSubDistrict"> | string
    zip_code?: IntFilter<"ThaiSubDistrict"> | number
    district_id?: IntFilter<"ThaiSubDistrict"> | number
    created_at?: DateTimeNullableFilter<"ThaiSubDistrict"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ThaiSubDistrict"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ThaiSubDistrict"> | Date | string | null
  }

  export type PersonUpsertWithWhereUniqueWithoutDistrictInput = {
    where: PersonWhereUniqueInput
    update: XOR<PersonUpdateWithoutDistrictInput, PersonUncheckedUpdateWithoutDistrictInput>
    create: XOR<PersonCreateWithoutDistrictInput, PersonUncheckedCreateWithoutDistrictInput>
  }

  export type PersonUpdateWithWhereUniqueWithoutDistrictInput = {
    where: PersonWhereUniqueInput
    data: XOR<PersonUpdateWithoutDistrictInput, PersonUncheckedUpdateWithoutDistrictInput>
  }

  export type PersonUpdateManyWithWhereWithoutDistrictInput = {
    where: PersonScalarWhereInput
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyWithoutDistrictInput>
  }

  export type ThaiDistrictCreateWithoutSubDistrictsInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    province: ThaiProvincesCreateNestedOneWithoutDistrictsInput
    persons?: PersonCreateNestedManyWithoutDistrictInput
  }

  export type ThaiDistrictUncheckedCreateWithoutSubDistrictsInput = {
    id: number
    name_th: string
    name_en: string
    province_id: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    persons?: PersonUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type ThaiDistrictCreateOrConnectWithoutSubDistrictsInput = {
    where: ThaiDistrictWhereUniqueInput
    create: XOR<ThaiDistrictCreateWithoutSubDistrictsInput, ThaiDistrictUncheckedCreateWithoutSubDistrictsInput>
  }

  export type PersonCreateWithoutSubDistrictInput = {
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    province: ThaiProvincesCreateNestedOneWithoutPersonsInput
    district: ThaiDistrictCreateNestedOneWithoutPersonsInput
  }

  export type PersonUncheckedCreateWithoutSubDistrictInput = {
    id?: number
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    district_id: number
    province_id: number
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PersonCreateOrConnectWithoutSubDistrictInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutSubDistrictInput, PersonUncheckedCreateWithoutSubDistrictInput>
  }

  export type PersonCreateManySubDistrictInputEnvelope = {
    data: PersonCreateManySubDistrictInput | PersonCreateManySubDistrictInput[]
    skipDuplicates?: boolean
  }

  export type ThaiDistrictUpsertWithoutSubDistrictsInput = {
    update: XOR<ThaiDistrictUpdateWithoutSubDistrictsInput, ThaiDistrictUncheckedUpdateWithoutSubDistrictsInput>
    create: XOR<ThaiDistrictCreateWithoutSubDistrictsInput, ThaiDistrictUncheckedCreateWithoutSubDistrictsInput>
    where?: ThaiDistrictWhereInput
  }

  export type ThaiDistrictUpdateToOneWithWhereWithoutSubDistrictsInput = {
    where?: ThaiDistrictWhereInput
    data: XOR<ThaiDistrictUpdateWithoutSubDistrictsInput, ThaiDistrictUncheckedUpdateWithoutSubDistrictsInput>
  }

  export type ThaiDistrictUpdateWithoutSubDistrictsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    province?: ThaiProvincesUpdateOneRequiredWithoutDistrictsNestedInput
    persons?: PersonUpdateManyWithoutDistrictNestedInput
  }

  export type ThaiDistrictUncheckedUpdateWithoutSubDistrictsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    province_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    persons?: PersonUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type PersonUpsertWithWhereUniqueWithoutSubDistrictInput = {
    where: PersonWhereUniqueInput
    update: XOR<PersonUpdateWithoutSubDistrictInput, PersonUncheckedUpdateWithoutSubDistrictInput>
    create: XOR<PersonCreateWithoutSubDistrictInput, PersonUncheckedCreateWithoutSubDistrictInput>
  }

  export type PersonUpdateWithWhereUniqueWithoutSubDistrictInput = {
    where: PersonWhereUniqueInput
    data: XOR<PersonUpdateWithoutSubDistrictInput, PersonUncheckedUpdateWithoutSubDistrictInput>
  }

  export type PersonUpdateManyWithWhereWithoutSubDistrictInput = {
    where: PersonScalarWhereInput
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyWithoutSubDistrictInput>
  }

  export type ThaiProvincesCreateManyGeographyInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type ThaiProvincesUpdateWithoutGeographyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    districts?: ThaiDistrictUpdateManyWithoutProvinceNestedInput
    persons?: PersonUpdateManyWithoutProvinceNestedInput
  }

  export type ThaiProvincesUncheckedUpdateWithoutGeographyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    districts?: ThaiDistrictUncheckedUpdateManyWithoutProvinceNestedInput
    persons?: PersonUncheckedUpdateManyWithoutProvinceNestedInput
  }

  export type ThaiProvincesUncheckedUpdateManyWithoutGeographyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ThaiDistrictCreateManyProvinceInput = {
    id: number
    name_th: string
    name_en: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type PersonCreateManyProvinceInput = {
    id?: number
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    sub_district_id: number
    district_id: number
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ThaiDistrictUpdateWithoutProvinceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subDistricts?: ThaiSubDistrictUpdateManyWithoutDistrictNestedInput
    persons?: PersonUpdateManyWithoutDistrictNestedInput
  }

  export type ThaiDistrictUncheckedUpdateWithoutProvinceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subDistricts?: ThaiSubDistrictUncheckedUpdateManyWithoutDistrictNestedInput
    persons?: PersonUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type ThaiDistrictUncheckedUpdateManyWithoutProvinceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PersonUpdateWithoutProvinceInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    district?: ThaiDistrictUpdateOneRequiredWithoutPersonsNestedInput
    subDistrict?: ThaiSubDistrictUpdateOneRequiredWithoutPersonsNestedInput
  }

  export type PersonUncheckedUpdateWithoutProvinceInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    sub_district_id?: IntFieldUpdateOperationsInput | number
    district_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonUncheckedUpdateManyWithoutProvinceInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    sub_district_id?: IntFieldUpdateOperationsInput | number
    district_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThaiSubDistrictCreateManyDistrictInput = {
    id: number
    name_th: string
    name_en: string
    zip_code: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type PersonCreateManyDistrictInput = {
    id?: number
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    sub_district_id: number
    province_id: number
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ThaiSubDistrictUpdateWithoutDistrictInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    persons?: PersonUpdateManyWithoutSubDistrictNestedInput
  }

  export type ThaiSubDistrictUncheckedUpdateWithoutDistrictInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    persons?: PersonUncheckedUpdateManyWithoutSubDistrictNestedInput
  }

  export type ThaiSubDistrictUncheckedUpdateManyWithoutDistrictInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_th?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PersonUpdateWithoutDistrictInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    province?: ThaiProvincesUpdateOneRequiredWithoutPersonsNestedInput
    subDistrict?: ThaiSubDistrictUpdateOneRequiredWithoutPersonsNestedInput
  }

  export type PersonUncheckedUpdateWithoutDistrictInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    sub_district_id?: IntFieldUpdateOperationsInput | number
    province_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonUncheckedUpdateManyWithoutDistrictInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    sub_district_id?: IntFieldUpdateOperationsInput | number
    province_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonCreateManySubDistrictInput = {
    id?: number
    first_name: string
    middle_name?: string | null
    last_name: string
    gender: string
    birth_date: Date | string
    age: number
    address: string
    district_id: number
    province_id: number
    zip_code: string
    id_card: string
    expire_id_card: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PersonUpdateWithoutSubDistrictInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    province?: ThaiProvincesUpdateOneRequiredWithoutPersonsNestedInput
    district?: ThaiDistrictUpdateOneRequiredWithoutPersonsNestedInput
  }

  export type PersonUncheckedUpdateWithoutSubDistrictInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    district_id?: IntFieldUpdateOperationsInput | number
    province_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonUncheckedUpdateManyWithoutSubDistrictInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    district_id?: IntFieldUpdateOperationsInput | number
    province_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    id_card?: StringFieldUpdateOperationsInput | string
    expire_id_card?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ThaiGeographiesCountOutputTypeDefaultArgs instead
     */
    export type ThaiGeographiesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThaiGeographiesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThaiProvincesCountOutputTypeDefaultArgs instead
     */
    export type ThaiProvincesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThaiProvincesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThaiDistrictCountOutputTypeDefaultArgs instead
     */
    export type ThaiDistrictCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThaiDistrictCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThaiSubDistrictCountOutputTypeDefaultArgs instead
     */
    export type ThaiSubDistrictCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThaiSubDistrictCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PersonDefaultArgs instead
     */
    export type PersonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThaiGeographiesDefaultArgs instead
     */
    export type ThaiGeographiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThaiGeographiesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThaiProvincesDefaultArgs instead
     */
    export type ThaiProvincesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThaiProvincesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThaiDistrictDefaultArgs instead
     */
    export type ThaiDistrictArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThaiDistrictDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThaiSubDistrictDefaultArgs instead
     */
    export type ThaiSubDistrictArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThaiSubDistrictDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}